file path,line #,comment,satd
CppCoreGuidelines/scripts/python/cpplint.py,1,!/usr/bin/env python,not
CppCoreGuidelines/scripts/python/cpplint.py,2,,not
CppCoreGuidelines/scripts/python/cpplint.py,3,Copyright (c) 2009 Google Inc. All rights reserved.,not
CppCoreGuidelines/scripts/python/cpplint.py,4,,not
CppCoreGuidelines/scripts/python/cpplint.py,5,"Redistribution and use in source and binary forms, with or without",not
CppCoreGuidelines/scripts/python/cpplint.py,6,"modification, are permitted provided that the following conditions are",not
CppCoreGuidelines/scripts/python/cpplint.py,7,met:,not
CppCoreGuidelines/scripts/python/cpplint.py,8,,not
CppCoreGuidelines/scripts/python/cpplint.py,9,* Redistributions of source code must retain the above copyright,not
CppCoreGuidelines/scripts/python/cpplint.py,10,"notice, this list of conditions and the following disclaimer.",not
CppCoreGuidelines/scripts/python/cpplint.py,11,* Redistributions in binary form must reproduce the above,not
CppCoreGuidelines/scripts/python/cpplint.py,12,"copyright notice, this list of conditions and the following disclaimer",not
CppCoreGuidelines/scripts/python/cpplint.py,13,in the documentation and/or other materials provided with the,not
CppCoreGuidelines/scripts/python/cpplint.py,14,distribution.,not
CppCoreGuidelines/scripts/python/cpplint.py,15,* Neither the name of Google Inc. nor the names of its,not
CppCoreGuidelines/scripts/python/cpplint.py,16,contributors may be used to endorse or promote products derived from,not
CppCoreGuidelines/scripts/python/cpplint.py,17,this software without specific prior written permission.,not
CppCoreGuidelines/scripts/python/cpplint.py,18,,not
CppCoreGuidelines/scripts/python/cpplint.py,19,THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS,not
CppCoreGuidelines/scripts/python/cpplint.py,20,"""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",not
CppCoreGuidelines/scripts/python/cpplint.py,21,"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",not
CppCoreGuidelines/scripts/python/cpplint.py,22,A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT,not
CppCoreGuidelines/scripts/python/cpplint.py,23,"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",not
CppCoreGuidelines/scripts/python/cpplint.py,24,"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",not
CppCoreGuidelines/scripts/python/cpplint.py,25,"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",not
CppCoreGuidelines/scripts/python/cpplint.py,26,"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",not
CppCoreGuidelines/scripts/python/cpplint.py,27,"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",not
CppCoreGuidelines/scripts/python/cpplint.py,28,(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE,not
CppCoreGuidelines/scripts/python/cpplint.py,29,"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",not
CppCoreGuidelines/scripts/python/cpplint.py,49,for log,not
CppCoreGuidelines/scripts/python/cpplint.py,58,"if empty, use defaults",not
CppCoreGuidelines/scripts/python/cpplint.py,61,"if empty, use defaults",not
CppCoreGuidelines/scripts/python/cpplint.py,65,Files with any of these extensions are considered to be,not
CppCoreGuidelines/scripts/python/cpplint.py,66,header files (and will undergo different style checks).,not
CppCoreGuidelines/scripts/python/cpplint.py,67,This set can be extended by using the --headers,not
CppCoreGuidelines/scripts/python/cpplint.py,68,option (also supported in CPPLINT.cfg),not
CppCoreGuidelines/scripts/python/cpplint.py,74,The allowed extensions for file names,not
CppCoreGuidelines/scripts/python/cpplint.py,75,This is set by --extensions flag,not
CppCoreGuidelines/scripts/python/cpplint.py,270,We categorize each error message we print.  Here are the categories.,not
CppCoreGuidelines/scripts/python/cpplint.py,271,We want an explicit list so we can list them all in cpplint --filter=.,not
CppCoreGuidelines/scripts/python/cpplint.py,272,"If you add a new error message with a new category, add it to the list",not
CppCoreGuidelines/scripts/python/cpplint.py,273,here!  cpplint_unittest.py should tell you if you forget to do this.,not
CppCoreGuidelines/scripts/python/cpplint.py,345,"These error categories are no longer enforced by cpplint, but for backwards-",not
CppCoreGuidelines/scripts/python/cpplint.py,346,compatibility they may still appear in NOLINT comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,352,The default state of the category filter. This is overridden by the --filter=,not
CppCoreGuidelines/scripts/python/cpplint.py,353,"flag. By default all errors are on, so only add here categories that should be",not
CppCoreGuidelines/scripts/python/cpplint.py,354,"off by default (i.e., categories that must be enabled by the --filter= flags).",not
CppCoreGuidelines/scripts/python/cpplint.py,355,"All entries here should start with a '-' or '+', as in the --filter= flag.",not
CppCoreGuidelines/scripts/python/cpplint.py,358,The default list of categories suppressed for C (not C++) files.,not
CppCoreGuidelines/scripts/python/cpplint.py,363,The default list of categories suppressed for Linux Kernel files.,not
CppCoreGuidelines/scripts/python/cpplint.py,368,"We used to check for high-bit characters, but after much discussion we",not
CppCoreGuidelines/scripts/python/cpplint.py,369,"decided those were OK, as long as they were in UTF-8 and didn't represent",not
CppCoreGuidelines/scripts/python/cpplint.py,370,"hard-coded international strings, which belong in a separate i18n file.",not
CppCoreGuidelines/scripts/python/cpplint.py,372,C++ headers,not
CppCoreGuidelines/scripts/python/cpplint.py,374,Legacy,not
CppCoreGuidelines/scripts/python/cpplint.py,426,17.6.1.2 C++ library headers,not
CppCoreGuidelines/scripts/python/cpplint.py,480,17.6.1.2 C++ headers for C library facilities,not
CppCoreGuidelines/scripts/python/cpplint.py,509,Type names,not
CppCoreGuidelines/scripts/python/cpplint.py,512,[dcl.type.simple],not
CppCoreGuidelines/scripts/python/cpplint.py,515,[support.types],not
CppCoreGuidelines/scripts/python/cpplint.py,517,[cstdint.syn],not
CppCoreGuidelines/scripts/python/cpplint.py,523,These headers are excluded from [build/include] and [build/include_order],not
CppCoreGuidelines/scripts/python/cpplint.py,524,checks:,not
CppCoreGuidelines/scripts/python/cpplint.py,525,- Anything not following google file name conventions (containing an,not
CppCoreGuidelines/scripts/python/cpplint.py,526,"uppercase character, such as Python.h or nsStringAPI.h, for example).",not
CppCoreGuidelines/scripts/python/cpplint.py,527,- Lua headers.,not
CppCoreGuidelines/scripts/python/cpplint.py,531,Pattern for matching FileInfo.BaseName() against test file name,not
CppCoreGuidelines/scripts/python/cpplint.py,535,"Pattern that matches only complete whitespace, possibly across multiple lines.",not
CppCoreGuidelines/scripts/python/cpplint.py,538,Assertion macros.  These are defined in base/logging.h and,not
CppCoreGuidelines/scripts/python/cpplint.py,539,testing/base/public/gunit.h.,not
CppCoreGuidelines/scripts/python/cpplint.py,546,Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE,not
CppCoreGuidelines/scripts/python/cpplint.py,563,"Alternative tokens and their replacements.  For full list, see section 2.5",not
CppCoreGuidelines/scripts/python/cpplint.py,564,Alternative tokens [lex.digraph] in the C++ standard.,not
CppCoreGuidelines/scripts/python/cpplint.py,565,,not
CppCoreGuidelines/scripts/python/cpplint.py,566,Digraphs (such as '%:') are not included here since it's a mess to,not
CppCoreGuidelines/scripts/python/cpplint.py,567,match those on a word boundary.,not
CppCoreGuidelines/scripts/python/cpplint.py,582,"Compile regular expression that matches all the above keywords.  The ""[ =()]""",not
CppCoreGuidelines/scripts/python/cpplint.py,583,bit is meant to avoid matching these keywords outside of boolean expressions.,not
CppCoreGuidelines/scripts/python/cpplint.py,584,,not
CppCoreGuidelines/scripts/python/cpplint.py,585,False positives include C-style multi-line comments and multi-line strings,not
CppCoreGuidelines/scripts/python/cpplint.py,586,but those have always been troublesome for cpplint.,not
CppCoreGuidelines/scripts/python/cpplint.py,591,These constants define types of headers for use with,not
CppCoreGuidelines/scripts/python/cpplint.py,592,_IncludeState.CheckNextIncludeOrder().,not
CppCoreGuidelines/scripts/python/cpplint.py,599,These constants define the current inline assembly state,not
CppCoreGuidelines/scripts/python/cpplint.py,600,Outside of inline assembly block,not
CppCoreGuidelines/scripts/python/cpplint.py,601,Inside inline assembly block,not
CppCoreGuidelines/scripts/python/cpplint.py,602,Last line of inline assembly block,not
CppCoreGuidelines/scripts/python/cpplint.py,603,The whole block is an inline assembly block,not
CppCoreGuidelines/scripts/python/cpplint.py,605,Match start of assembly blocks,not
CppCoreGuidelines/scripts/python/cpplint.py,610,Match strings that indicate we're working on a C (not C++) file.,not
CppCoreGuidelines/scripts/python/cpplint.py,614,Match string that indicates we're working on a Linux Kernel file.,not
CppCoreGuidelines/scripts/python/cpplint.py,619,"{str, set(int)}: a map from error categories to sets of linenumbers",not
CppCoreGuidelines/scripts/python/cpplint.py,620,on which those errors are expected and should be suppressed.,not
CppCoreGuidelines/scripts/python/cpplint.py,623,The root directory used for deriving header guard CPP variable.,not
CppCoreGuidelines/scripts/python/cpplint.py,624,This is set by --root flag.,not
CppCoreGuidelines/scripts/python/cpplint.py,627,"The top level repository directory. If set, _root is calculated relative to",not
CppCoreGuidelines/scripts/python/cpplint.py,628,this directory instead of the directory containing version control artifacts.,not
CppCoreGuidelines/scripts/python/cpplint.py,629,This is set by the --repository flag.,not
CppCoreGuidelines/scripts/python/cpplint.py,632,Files to exclude from linting. This is set by the --exclude flag.,not
CppCoreGuidelines/scripts/python/cpplint.py,635,Whether to supress PrintInfo messages,not
CppCoreGuidelines/scripts/python/cpplint.py,638,The allowed line length of files.,not
CppCoreGuidelines/scripts/python/cpplint.py,639,This is set by --linelength flag.,not
CppCoreGuidelines/scripts/python/cpplint.py,645,-- pylint: disable=redefined-builtin,not
CppCoreGuidelines/scripts/python/cpplint.py,651,-- pylint: disable=redefined-builtin,not
CppCoreGuidelines/scripts/python/cpplint.py,657,-- pylint: disable=redefined-builtin,not
CppCoreGuidelines/scripts/python/cpplint.py,661,-- pylint: disable=no-member,not
CppCoreGuidelines/scripts/python/cpplint.py,662,BINARY_TYPE = str,not
CppCoreGuidelines/scripts/python/cpplint.py,666,BINARY_TYPE = bytes,not
CppCoreGuidelines/scripts/python/cpplint.py,676,"{str, bool}: a map from error categories to booleans which indicate if the",not
CppCoreGuidelines/scripts/python/cpplint.py,677,category should be suppressed for every line.,not
CppCoreGuidelines/scripts/python/cpplint.py,703,"=> ""suppress all""",not
CppCoreGuidelines/scripts/python/cpplint.py,759,The regexp compilation caching is inlined in both Match and Search for,not
CppCoreGuidelines/scripts/python/cpplint.py,760,performance reasons; factoring it out into a separate function turns out,not
CppCoreGuidelines/scripts/python/cpplint.py,761,to be noticeably expensive.,not
CppCoreGuidelines/scripts/python/cpplint.py,809,self._section will move monotonically through this set. If it ever,not
CppCoreGuidelines/scripts/python/cpplint.py,810,"needs to move backwards, CheckNextIncludeOrder will raise an error.",SATD
CppCoreGuidelines/scripts/python/cpplint.py,859,The name of the current section.,not
CppCoreGuidelines/scripts/python/cpplint.py,861,The path of last found header.,not
CppCoreGuidelines/scripts/python/cpplint.py,864,Update list of includes.  Note that we never pop from the,not
CppCoreGuidelines/scripts/python/cpplint.py,865,include list.,not
CppCoreGuidelines/scripts/python/cpplint.py,900,"If previous section is different from current section, _last_header will",not
CppCoreGuidelines/scripts/python/cpplint.py,901,"be reset to empty string, so it's always less than current header.",not
CppCoreGuidelines/scripts/python/cpplint.py,902,,not
CppCoreGuidelines/scripts/python/cpplint.py,903,"If previous line was a blank line, assume that the headers are",not
CppCoreGuidelines/scripts/python/cpplint.py,904,intentionally sorted the way they are.,not
CppCoreGuidelines/scripts/python/cpplint.py,951,This will always be the fallback because we're not sure,not
CppCoreGuidelines/scripts/python/cpplint.py,952,enough that the header is associated with this file.,not
CppCoreGuidelines/scripts/python/cpplint.py,968,global setting.,not
CppCoreGuidelines/scripts/python/cpplint.py,969,global count of reported errors,not
CppCoreGuidelines/scripts/python/cpplint.py,970,filters to apply when emitting error messages,not
CppCoreGuidelines/scripts/python/cpplint.py,972,backup of filter list. Used to restore the state after each file.,not
CppCoreGuidelines/scripts/python/cpplint.py,974,In what way are we counting errors?,not
CppCoreGuidelines/scripts/python/cpplint.py,975,string to int dict storing error counts,not
CppCoreGuidelines/scripts/python/cpplint.py,977,output format:,not
CppCoreGuidelines/scripts/python/cpplint.py,978,"""emacs"" - format that emacs can parse (default)",not
CppCoreGuidelines/scripts/python/cpplint.py,979,"""eclipse"" - format that eclipse can parse",not
CppCoreGuidelines/scripts/python/cpplint.py,980,"""vs7"" - format that Microsoft Visual Studio 7 can parse",not
CppCoreGuidelines/scripts/python/cpplint.py,981,"""junit"" - format that Jenkins, Bamboo, etc can parse",not
CppCoreGuidelines/scripts/python/cpplint.py,984,"For JUnit output, save errors and failures until the end so that they",not
CppCoreGuidelines/scripts/python/cpplint.py,985,can be written into the XML,not
CppCoreGuidelines/scripts/python/cpplint.py,1017,Default filters always have less priority than the flag ones.,not
CppCoreGuidelines/scripts/python/cpplint.py,1098,Group failures by file,not
CppCoreGuidelines/scripts/python/cpplint.py,1107,Create a testcase for each file,not
CppCoreGuidelines/scripts/python/cpplint.py,1189,"for --v=0, 500 for --v=1, etc.",not
CppCoreGuidelines/scripts/python/cpplint.py,1190,about 50% more than _NORMAL_TRIGGER.,not
CppCoreGuidelines/scripts/python/cpplint.py,1231,"50 => 0, 100 => 1, 200 => 2, 400 => 3, 800 => 4, 1600 => 5, ...",not
CppCoreGuidelines/scripts/python/cpplint.py,1279,"If the user specified a repository path, it exists, and the file is",not
CppCoreGuidelines/scripts/python/cpplint.py,1280,"contained in it, use the specified repository path",not
CppCoreGuidelines/scripts/python/cpplint.py,1285,allow case insensitive compare on Windows,not
CppCoreGuidelines/scripts/python/cpplint.py,1294,"If there's a .svn file in the current directory, we recursively look",not
CppCoreGuidelines/scripts/python/cpplint.py,1295,up the directory tree for the top of the SVN checkout,not
CppCoreGuidelines/scripts/python/cpplint.py,1305,"Not SVN <= 1.6? Try to find a git, hg, or svn top level directory by",not
CppCoreGuidelines/scripts/python/cpplint.py,1306,searching up from the current path.,not
CppCoreGuidelines/scripts/python/cpplint.py,1321,Don't know what to do; header guard warnings may be wrong...,not
CppCoreGuidelines/scripts/python/cpplint.py,1358,There are three ways we might decide not to print an error message:,not
CppCoreGuidelines/scripts/python/cpplint.py,1359,"a ""NOLINT(category)"" comment appears in the source,",not
CppCoreGuidelines/scripts/python/cpplint.py,1360,"the verbosity level isn't high enough, or the filters filter it out.",not
CppCoreGuidelines/scripts/python/cpplint.py,1376,should have been checked for in SetFilter.,not
CppCoreGuidelines/scripts/python/cpplint.py,1421,Matches standard C++ escape sequences per 2.13.2.3 of the C++ standard.,not
CppCoreGuidelines/scripts/python/cpplint.py,1424,Match a single C style comment on the same line.,not
CppCoreGuidelines/scripts/python/cpplint.py,1426,Matches multi-line C style comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,1427,"This RE is a little bit more complicated than one might expect, because we",not
CppCoreGuidelines/scripts/python/cpplint.py,1428,have to take care of space removals tools so we can handle comments inside,SATD
CppCoreGuidelines/scripts/python/cpplint.py,1429,statements better.,SATD
CppCoreGuidelines/scripts/python/cpplint.py,1430,The current rule is: We only clear spaces from both sides when we're at the,not
CppCoreGuidelines/scripts/python/cpplint.py,1431,"end of the line. Otherwise, we try to remove spaces from the right side,",not
CppCoreGuidelines/scripts/python/cpplint.py,1432,if this doesn't work we try on left side but only if there's a non-character,not
CppCoreGuidelines/scripts/python/cpplint.py,1433,on the right.,not
CppCoreGuidelines/scripts/python/cpplint.py,1454,"after this, \\"" does not match to \""",not
CppCoreGuidelines/scripts/python/cpplint.py,1482,"Inside a raw string, look for the end",not
CppCoreGuidelines/scripts/python/cpplint.py,1485,"Found the end of the string, match leading space for this",not
CppCoreGuidelines/scripts/python/cpplint.py,1486,"line and resume copying the original lines, and also insert",not
CppCoreGuidelines/scripts/python/cpplint.py,1487,"a """" on the last line.",not
CppCoreGuidelines/scripts/python/cpplint.py,1492,"Haven't found the end yet, append a blank line.",not
CppCoreGuidelines/scripts/python/cpplint.py,1495,"Look for beginning of a raw string, and replace them with",not
CppCoreGuidelines/scripts/python/cpplint.py,1496,empty strings.  This is done in a loop to handle multiple raw,not
CppCoreGuidelines/scripts/python/cpplint.py,1497,strings on the same line.,not
CppCoreGuidelines/scripts/python/cpplint.py,1499,Look for beginning of a raw string.,not
CppCoreGuidelines/scripts/python/cpplint.py,1500,See 2.14.15 [lex.string] for syntax.,not
CppCoreGuidelines/scripts/python/cpplint.py,1501,,not
CppCoreGuidelines/scripts/python/cpplint.py,1502,"Once we have matched a raw string, we check the prefix of the",not
CppCoreGuidelines/scripts/python/cpplint.py,1503,line to make sure that the line is not part of a single line,not
CppCoreGuidelines/scripts/python/cpplint.py,1504,comment.  It's done this way because we remove raw strings,not
CppCoreGuidelines/scripts/python/cpplint.py,1505,before removing comments as opposed to removing comments,not
CppCoreGuidelines/scripts/python/cpplint.py,1506,before removing raw strings.  This is because there are some,not
CppCoreGuidelines/scripts/python/cpplint.py,1507,"cpplint checks that requires the comments to be preserved, but",not
CppCoreGuidelines/scripts/python/cpplint.py,1508,we don't want to check comments that are inside raw strings.,not
CppCoreGuidelines/scripts/python/cpplint.py,1517,Raw string ended on same line,not
CppCoreGuidelines/scripts/python/cpplint.py,1522,Start of a multi-line raw string,not
CppCoreGuidelines/scripts/python/cpplint.py,1529,"TODO(unknown): if delimiter is not None here, we might want to",SATD
CppCoreGuidelines/scripts/python/cpplint.py,1530,emit a warning for unterminated string.,not
CppCoreGuidelines/scripts/python/cpplint.py,1538,Only return this marker if the comment goes beyond this line,not
CppCoreGuidelines/scripts/python/cpplint.py,1556,"Having // dummy comments makes the lines non-empty, so we will not get",not
CppCoreGuidelines/scripts/python/cpplint.py,1557,unnecessary blank line warnings later in the code.,not
CppCoreGuidelines/scripts/python/cpplint.py,1590,get rid of /* ... */,not
CppCoreGuidelines/scripts/python/cpplint.py,1636,Remove escaped characters first to make quote/single quote collapsing,not
CppCoreGuidelines/scripts/python/cpplint.py,1637,basic.  Things that look like escaped characters shouldn't occur,not
CppCoreGuidelines/scripts/python/cpplint.py,1638,outside of strings and chars.,not
CppCoreGuidelines/scripts/python/cpplint.py,1641,Replace quoted strings and digit separators.  Both single quotes,not
CppCoreGuidelines/scripts/python/cpplint.py,1642,"and double quotes are processed in the same loop, otherwise",not
CppCoreGuidelines/scripts/python/cpplint.py,1643,nested quotes wouldn't work.,not
CppCoreGuidelines/scripts/python/cpplint.py,1646,Find the first quote character,not
CppCoreGuidelines/scripts/python/cpplint.py,1654,Collapse double quoted strings,not
CppCoreGuidelines/scripts/python/cpplint.py,1660,"Unmatched double quote, don't bother processing the rest",not
CppCoreGuidelines/scripts/python/cpplint.py,1661,of the line since this is probably a multiline string.,not
CppCoreGuidelines/scripts/python/cpplint.py,1665,"Found single quote, check nearby text to eliminate digit separators.",not
CppCoreGuidelines/scripts/python/cpplint.py,1666,,not
CppCoreGuidelines/scripts/python/cpplint.py,1667,"There is no special handling for floating point here, because",not
CppCoreGuidelines/scripts/python/cpplint.py,1668,the integer/fractional/exponent parts would all be parsed,not
CppCoreGuidelines/scripts/python/cpplint.py,1669,correctly as long as there are digits on both sides of the,not
CppCoreGuidelines/scripts/python/cpplint.py,1670,separator.  So we are fine as long as we don't see something,not
CppCoreGuidelines/scripts/python/cpplint.py,1671,"like ""0.'3"" (gcc 4.9.0 will not allow this literal).",not
CppCoreGuidelines/scripts/python/cpplint.py,1682,Unmatched single quote,not
CppCoreGuidelines/scripts/python/cpplint.py,1705,"Found start of parenthesized expression, push to expression stack",not
CppCoreGuidelines/scripts/python/cpplint.py,1708,Found potential start of template argument list,not
CppCoreGuidelines/scripts/python/cpplint.py,1710,Left shift operator,not
CppCoreGuidelines/scripts/python/cpplint.py,1716,"operator<, don't add to stack",not
CppCoreGuidelines/scripts/python/cpplint.py,1719,Tentative start of template argument list,not
CppCoreGuidelines/scripts/python/cpplint.py,1722,Found end of parenthesized expression.,not
CppCoreGuidelines/scripts/python/cpplint.py,1723,,not
CppCoreGuidelines/scripts/python/cpplint.py,1724,"If we are currently expecting a matching '>', the pending '<'",not
CppCoreGuidelines/scripts/python/cpplint.py,1725,must have been an operator.  Remove them from expression stack.,not
CppCoreGuidelines/scripts/python/cpplint.py,1737,Mismatched parentheses,not
CppCoreGuidelines/scripts/python/cpplint.py,1740,Found potential end of template argument list.,not
CppCoreGuidelines/scripts/python/cpplint.py,1742,"Ignore ""->"" and operator functions",not
CppCoreGuidelines/scripts/python/cpplint.py,1747,"Pop the stack if there is a matching '<'.  Otherwise, ignore",not
CppCoreGuidelines/scripts/python/cpplint.py,1748,this '>' since it must be an operator.,not
CppCoreGuidelines/scripts/python/cpplint.py,1755,Found something that look like end of statements.  If we are currently,not
CppCoreGuidelines/scripts/python/cpplint.py,1756,"expecting a '>', the matching '<' must have been an operator, since",not
CppCoreGuidelines/scripts/python/cpplint.py,1757,template argument list should not contain statements.,not
CppCoreGuidelines/scripts/python/cpplint.py,1763,Did not find end of expression or unbalanced parentheses on this line,not
CppCoreGuidelines/scripts/python/cpplint.py,1794,Check first line,not
CppCoreGuidelines/scripts/python/cpplint.py,1799,Continue scanning forward,not
CppCoreGuidelines/scripts/python/cpplint.py,1807,"Did not find end of expression before end of file, give up",not
CppCoreGuidelines/scripts/python/cpplint.py,1831,"Found end of expression, push to expression stack",not
CppCoreGuidelines/scripts/python/cpplint.py,1834,Found potential end of template argument list.,not
CppCoreGuidelines/scripts/python/cpplint.py,1835,,not
CppCoreGuidelines/scripts/python/cpplint.py,1836,"Ignore it if it's a ""->"" or "">="" or ""operator>""",not
CppCoreGuidelines/scripts/python/cpplint.py,1845,Found potential start of template argument list,not
CppCoreGuidelines/scripts/python/cpplint.py,1847,Left shift operator,not
CppCoreGuidelines/scripts/python/cpplint.py,1850,"If there is a matching '>', we can pop the expression stack.",not
CppCoreGuidelines/scripts/python/cpplint.py,1851,"Otherwise, ignore this '<' since it must be an operator.",not
CppCoreGuidelines/scripts/python/cpplint.py,1857,Found start of expression.,not
CppCoreGuidelines/scripts/python/cpplint.py,1858,,not
CppCoreGuidelines/scripts/python/cpplint.py,1859,"If there are any unmatched '>' on the stack, they must be",not
CppCoreGuidelines/scripts/python/cpplint.py,1860,operators.  Remove those.,not
CppCoreGuidelines/scripts/python/cpplint.py,1872,Mismatched parentheses,not
CppCoreGuidelines/scripts/python/cpplint.py,1875,Found something that look like end of statements.  If we are currently,not
CppCoreGuidelines/scripts/python/cpplint.py,1876,"expecting a '<', the matching '>' must have been an operator, since",not
CppCoreGuidelines/scripts/python/cpplint.py,1877,template argument list should not contain statements.,not
CppCoreGuidelines/scripts/python/cpplint.py,1909,Check last line,not
CppCoreGuidelines/scripts/python/cpplint.py,1914,Continue scanning backward,not
CppCoreGuidelines/scripts/python/cpplint.py,1922,"Did not find start of expression before beginning of file, give up",not
CppCoreGuidelines/scripts/python/cpplint.py,1929,We'll say it should occur by line 10. Don't forget there's a,not
CppCoreGuidelines/scripts/python/cpplint.py,1930,dummy line at the front.,not
CppCoreGuidelines/scripts/python/cpplint.py,1933,means no copyright line was found,not
CppCoreGuidelines/scripts/python/cpplint.py,1967,Restores original filename in case that cpplint is invoked from Emacs's,not
CppCoreGuidelines/scripts/python/cpplint.py,1968,flymake.,not
CppCoreGuidelines/scripts/python/cpplint.py,1971,Replace 'c++' with 'cpp'.,not
CppCoreGuidelines/scripts/python/cpplint.py,1978,On Windows using directory separator will leave us with,not
CppCoreGuidelines/scripts/python/cpplint.py,1979,"""bogus escape error"" unless we properly escape regex.",not
CppCoreGuidelines/scripts/python/cpplint.py,1998,Don't check for header guards if there are error suppression,not
CppCoreGuidelines/scripts/python/cpplint.py,1999,comments somewhere in this file.,not
CppCoreGuidelines/scripts/python/cpplint.py,2000,,not
CppCoreGuidelines/scripts/python/cpplint.py,2001,"Because this is silencing a warning for a nonexistent line, we",not
CppCoreGuidelines/scripts/python/cpplint.py,2002,"only support the very specific NOLINT(build/header_guard) syntax,",not
CppCoreGuidelines/scripts/python/cpplint.py,2003,and not the general NOLINT or NOLINT(*) syntax.,not
CppCoreGuidelines/scripts/python/cpplint.py,2009,Allow pragma once instead of header guards,not
CppCoreGuidelines/scripts/python/cpplint.py,2024,"find the first occurrence of #ifndef and #define, save arg",not
CppCoreGuidelines/scripts/python/cpplint.py,2026,set ifndef to the header guard presented on the #ifndef line.,not
CppCoreGuidelines/scripts/python/cpplint.py,2031,"find the last occurrence of #endif, save entire line",not
CppCoreGuidelines/scripts/python/cpplint.py,2042,"The guard should be PATH_FILE_H_, but we also allow PATH_FILE_H__",not
CppCoreGuidelines/scripts/python/cpplint.py,2043,for backward compatibility.,not
CppCoreGuidelines/scripts/python/cpplint.py,2054,"Check for ""//"" comments on endif line.",not
CppCoreGuidelines/scripts/python/cpplint.py,2060,Issue low severity warning for deprecated double trailing underscore,not
CppCoreGuidelines/scripts/python/cpplint.py,2065,"Didn't find the corresponding ""//"" comment.  If this file does not",not
CppCoreGuidelines/scripts/python/cpplint.py,2066,"contain any ""//"" comments at all, it could be that the compiler",not
CppCoreGuidelines/scripts/python/cpplint.py,2067,"only wants ""/**/"" comments, look for those instead.",not
CppCoreGuidelines/scripts/python/cpplint.py,2079,Low severity warning for double trailing underscore,not
CppCoreGuidelines/scripts/python/cpplint.py,2084,Didn't find anything,not
CppCoreGuidelines/scripts/python/cpplint.py,2092,Do not check test files,not
CppCoreGuidelines/scripts/python/cpplint.py,2150,The array lines() was created by adding two newlines to the,not
CppCoreGuidelines/scripts/python/cpplint.py,2151,"original file (go figure), then splitting on \n.",not
CppCoreGuidelines/scripts/python/cpplint.py,2152,"To verify that the file ends in \n, we just have to make sure the",not
CppCoreGuidelines/scripts/python/cpplint.py,2153,last-but-two element of lines() exists and is empty.,not
CppCoreGuidelines/scripts/python/cpplint.py,2178,"Remove all \\ (escaped backslashes) from the line. They are OK, and the",not
CppCoreGuidelines/scripts/python/cpplint.py,2179,"second (escaped) slash may trigger later \"" detection erroneously.",not
CppCoreGuidelines/scripts/python/cpplint.py,2197,"(non-threadsafe name, thread-safe alternative, validation pattern)",not
CppCoreGuidelines/scripts/python/cpplint.py,2198,,not
CppCoreGuidelines/scripts/python/cpplint.py,2199,The validation pattern is used to eliminate false positives such as:,not
CppCoreGuidelines/scripts/python/cpplint.py,2200,_rand();               // false positive due to substring match.,not
CppCoreGuidelines/scripts/python/cpplint.py,2201,->rand();              // some member function rand().,not
CppCoreGuidelines/scripts/python/cpplint.py,2202,ACMRandom rand(seed);  // some variable named rand.,not
CppCoreGuidelines/scripts/python/cpplint.py,2203,ISAACRandom rand();    // another variable named rand.,not
CppCoreGuidelines/scripts/python/cpplint.py,2204,,not
CppCoreGuidelines/scripts/python/cpplint.py,2205,Basically we require the return value of these functions to be used,not
CppCoreGuidelines/scripts/python/cpplint.py,2206,in some expression context on the same line by matching on some,not
CppCoreGuidelines/scripts/python/cpplint.py,2207,operator before the function name.  This eliminates constructors and,not
CppCoreGuidelines/scripts/python/cpplint.py,2208,member function calls.,not
CppCoreGuidelines/scripts/python/cpplint.py,2244,Additional pattern matching check to confirm that this is the,not
CppCoreGuidelines/scripts/python/cpplint.py,2245,function we are looking for,not
CppCoreGuidelines/scripts/python/cpplint.py,2271,"Matches invalid increment: *count++, which moves pointer instead of",not
CppCoreGuidelines/scripts/python/cpplint.py,2272,incrementing a value.,not
CppCoreGuidelines/scripts/python/cpplint.py,2385,Remember initial indentation level for this class.  Using raw_lines here,not
CppCoreGuidelines/scripts/python/cpplint.py,2386,instead of elided to account for leading comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,2389,Try to find the end of the class.  This will be confused by things like:,not
CppCoreGuidelines/scripts/python/cpplint.py,2390,class A {,not
CppCoreGuidelines/scripts/python/cpplint.py,2391,} *x = { ...,not
CppCoreGuidelines/scripts/python/cpplint.py,2392,,not
CppCoreGuidelines/scripts/python/cpplint.py,2393,But it's still good enough for CheckSectionSpacing.,not
CppCoreGuidelines/scripts/python/cpplint.py,2404,Look for a bare ':',not
CppCoreGuidelines/scripts/python/cpplint.py,2409,"If there is a DISALLOW macro, it should appear near the end of",not
CppCoreGuidelines/scripts/python/cpplint.py,2410,the class.,not
CppCoreGuidelines/scripts/python/cpplint.py,2426,Check that closing brace is aligned with beginning of the class.,not
CppCoreGuidelines/scripts/python/cpplint.py,2427,Only do this if the closing brace is indented by only whitespaces.,not
CppCoreGuidelines/scripts/python/cpplint.py,2428,This means we will not check single-line class definitions.,not
CppCoreGuidelines/scripts/python/cpplint.py,2451,Check how many lines is enclosed in this namespace.  Don't issue,not
CppCoreGuidelines/scripts/python/cpplint.py,2452,warning for missing namespace comments if there aren't enough,not
CppCoreGuidelines/scripts/python/cpplint.py,2453,"lines.  However, do apply checks if there is already an end of",not
CppCoreGuidelines/scripts/python/cpplint.py,2454,namespace comment and it's incorrect.,not
CppCoreGuidelines/scripts/python/cpplint.py,2455,,not
CppCoreGuidelines/scripts/python/cpplint.py,2456,TODO(unknown): We always want to check end of namespace comments,SATD
CppCoreGuidelines/scripts/python/cpplint.py,2457,"if a namespace is large, but sometimes we also want to apply the",not
CppCoreGuidelines/scripts/python/cpplint.py,2458,check if a short namespace contained nontrivial things (something,not
CppCoreGuidelines/scripts/python/cpplint.py,2459,other than forward declarations).  There is currently no logic on,not
CppCoreGuidelines/scripts/python/cpplint.py,2460,"deciding what these nontrivial things are, so this check is",not
CppCoreGuidelines/scripts/python/cpplint.py,2461,"triggered by namespace size only, which works most of the time.",not
CppCoreGuidelines/scripts/python/cpplint.py,2466,Look for matching comment at end of namespace.,not
CppCoreGuidelines/scripts/python/cpplint.py,2467,,not
CppCoreGuidelines/scripts/python/cpplint.py,2468,"Note that we accept C style ""/* */"" comments for terminating",not
CppCoreGuidelines/scripts/python/cpplint.py,2469,"namespaces, so that code that terminate namespaces inside",not
CppCoreGuidelines/scripts/python/cpplint.py,2470,preprocessor macros can be cpplint clean.,not
CppCoreGuidelines/scripts/python/cpplint.py,2471,,not
CppCoreGuidelines/scripts/python/cpplint.py,2472,"We also accept stuff like ""// end of namespace <name>."" with the",not
CppCoreGuidelines/scripts/python/cpplint.py,2473,period at the end.,not
CppCoreGuidelines/scripts/python/cpplint.py,2474,,not
CppCoreGuidelines/scripts/python/cpplint.py,2475,"Besides these, we don't accept anything else, otherwise we might",not
CppCoreGuidelines/scripts/python/cpplint.py,2476,get false negatives when existing comment is a substring of the,not
CppCoreGuidelines/scripts/python/cpplint.py,2477,expected namespace.,not
CppCoreGuidelines/scripts/python/cpplint.py,2479,Named namespace,not
CppCoreGuidelines/scripts/python/cpplint.py,2487,Anonymous namespace,not
CppCoreGuidelines/scripts/python/cpplint.py,2489,"If ""// namespace anonymous"" or ""// anonymous namespace (more text)"",",not
CppCoreGuidelines/scripts/python/cpplint.py,2490,"mention ""// anonymous namespace"" as an acceptable form",not
CppCoreGuidelines/scripts/python/cpplint.py,2504,The entire nesting stack before #if,not
CppCoreGuidelines/scripts/python/cpplint.py,2507,The entire nesting stack up to #else,not
CppCoreGuidelines/scripts/python/cpplint.py,2510,Whether we have already seen #else or #elif,not
CppCoreGuidelines/scripts/python/cpplint.py,2518,Stack for tracking all braces.  An object is pushed whenever we,not
CppCoreGuidelines/scripts/python/cpplint.py,2519,"see a ""{"", and popped when we see a ""}"".  Only 3 types of",not
CppCoreGuidelines/scripts/python/cpplint.py,2520,objects are possible:,not
CppCoreGuidelines/scripts/python/cpplint.py,2521,- _ClassInfo: a class or struct.,not
CppCoreGuidelines/scripts/python/cpplint.py,2522,- _NamespaceInfo: a namespace.,not
CppCoreGuidelines/scripts/python/cpplint.py,2523,- _BlockInfo: some other type of block.,not
CppCoreGuidelines/scripts/python/cpplint.py,2526,Top of the previous stack before each Update().,not
CppCoreGuidelines/scripts/python/cpplint.py,2527,,not
CppCoreGuidelines/scripts/python/cpplint.py,2528,"Because the nesting_stack is updated at the end of each line, we",not
CppCoreGuidelines/scripts/python/cpplint.py,2529,had to do some convoluted checks to find out what is the current,not
CppCoreGuidelines/scripts/python/cpplint.py,2530,scope at the beginning of the line.  This check is simplified by,not
CppCoreGuidelines/scripts/python/cpplint.py,2531,saving the previous top of nesting stack.,not
CppCoreGuidelines/scripts/python/cpplint.py,2532,,not
CppCoreGuidelines/scripts/python/cpplint.py,2533,"We could save the full stack, but we only need the top.  Copying",not
CppCoreGuidelines/scripts/python/cpplint.py,2534,the full nesting stack would slow down cpplint by ~10%.,not
CppCoreGuidelines/scripts/python/cpplint.py,2537,Stack of _PreprocessorInfo objects.,not
CppCoreGuidelines/scripts/python/cpplint.py,2592,Find the earliest character that might indicate a template argument,not
CppCoreGuidelines/scripts/python/cpplint.py,2602,These things do not look like template argument list:,not
CppCoreGuidelines/scripts/python/cpplint.py,2603,class Suspect {,not
CppCoreGuidelines/scripts/python/cpplint.py,2604,class Suspect x; },not
CppCoreGuidelines/scripts/python/cpplint.py,2607,These things look like template argument list:,not
CppCoreGuidelines/scripts/python/cpplint.py,2608,template <class Suspect>,not
CppCoreGuidelines/scripts/python/cpplint.py,2609,template <class Suspect = default_value>,not
CppCoreGuidelines/scripts/python/cpplint.py,2610,template <class Suspect[]>,not
CppCoreGuidelines/scripts/python/cpplint.py,2611,template <class Suspect...>,not
CppCoreGuidelines/scripts/python/cpplint.py,2614,Check if token is an unmatched '<'.,not
CppCoreGuidelines/scripts/python/cpplint.py,2615,"If not, move on to the next character.",not
CppCoreGuidelines/scripts/python/cpplint.py,2623,"We can't be sure if we just find a single '<', and need to",not
CppCoreGuidelines/scripts/python/cpplint.py,2624,find the matching '>'.,not
CppCoreGuidelines/scripts/python/cpplint.py,2627,Not sure if template argument list or syntax error in file,not
CppCoreGuidelines/scripts/python/cpplint.py,2655,"Beginning of #if block, save the nesting stack here.  The saved",not
CppCoreGuidelines/scripts/python/cpplint.py,2656,stack will allow us to restore the parsing state in the #else case.,not
CppCoreGuidelines/scripts/python/cpplint.py,2659,Beginning of #else block,not
CppCoreGuidelines/scripts/python/cpplint.py,2662,This is the first #else or #elif block.  Remember the,not
CppCoreGuidelines/scripts/python/cpplint.py,2663,whole nesting stack up to this point.  This is what we,not
CppCoreGuidelines/scripts/python/cpplint.py,2664,keep after the #endif.,not
CppCoreGuidelines/scripts/python/cpplint.py,2668,Restore the stack to how it was before the #if,not
CppCoreGuidelines/scripts/python/cpplint.py,2671,"TODO(unknown): unexpected #else, issue warning?",SATD
CppCoreGuidelines/scripts/python/cpplint.py,2674,End of #if or #else blocks.,not
CppCoreGuidelines/scripts/python/cpplint.py,2676,"If we saw an #else, we will need to restore the nesting",not
CppCoreGuidelines/scripts/python/cpplint.py,2677,"stack to its former state before the #else, otherwise we",not
CppCoreGuidelines/scripts/python/cpplint.py,2678,will just continue from where we left off.,not
CppCoreGuidelines/scripts/python/cpplint.py,2680,Here we can just use a shallow copy since we are the last,not
CppCoreGuidelines/scripts/python/cpplint.py,2681,reference to it.,not
CppCoreGuidelines/scripts/python/cpplint.py,2683,Drop the corresponding #if,not
CppCoreGuidelines/scripts/python/cpplint.py,2686,"TODO(unknown): unexpected #endif, issue warning?",SATD
CppCoreGuidelines/scripts/python/cpplint.py,2689,"TODO(unknown): Update() is too long, but we will refactor later.",SATD
CppCoreGuidelines/scripts/python/cpplint.py,2701,Remember top of the previous nesting stack.,not
CppCoreGuidelines/scripts/python/cpplint.py,2702,,not
CppCoreGuidelines/scripts/python/cpplint.py,2703,"The stack is always pushed/popped and not modified in place, so",not
CppCoreGuidelines/scripts/python/cpplint.py,2704,we can just do a shallow copy instead of copy.deepcopy.  Using,not
CppCoreGuidelines/scripts/python/cpplint.py,2705,deepcopy would slow down cpplint by ~28%.,not
CppCoreGuidelines/scripts/python/cpplint.py,2711,Update pp_stack,not
CppCoreGuidelines/scripts/python/cpplint.py,2714,Count parentheses.  This is to avoid adding struct arguments to,not
CppCoreGuidelines/scripts/python/cpplint.py,2715,the nesting stack.,not
CppCoreGuidelines/scripts/python/cpplint.py,2721,Also check if we are starting or ending an inline assembly block.,not
CppCoreGuidelines/scripts/python/cpplint.py,2726,Enter assembly block,not
CppCoreGuidelines/scripts/python/cpplint.py,2729,"Not entering assembly block.  If previous line was _END_ASM,",not
CppCoreGuidelines/scripts/python/cpplint.py,2730,we will now shift to _NO_ASM state.,not
CppCoreGuidelines/scripts/python/cpplint.py,2734,Exit assembly block,not
CppCoreGuidelines/scripts/python/cpplint.py,2737,Consume namespace declaration at the beginning of the line.  Do,not
CppCoreGuidelines/scripts/python/cpplint.py,2738,this in a loop so that we catch same line declarations like this:,not
CppCoreGuidelines/scripts/python/cpplint.py,2739,namespace proto2 { namespace bridge { class MessageSet; } },not
CppCoreGuidelines/scripts/python/cpplint.py,2741,"Match start of namespace.  The ""\b\s*"" below catches namespace",not
CppCoreGuidelines/scripts/python/cpplint.py,2742,"declarations even if it weren't followed by a whitespace, this",not
CppCoreGuidelines/scripts/python/cpplint.py,2743,is so that we don't confuse our namespace checker.  The,not
CppCoreGuidelines/scripts/python/cpplint.py,2744,missing spaces will be flagged by CheckSpacing.,not
CppCoreGuidelines/scripts/python/cpplint.py,2757,Look for a class declaration in whatever is left of the line,not
CppCoreGuidelines/scripts/python/cpplint.py,2758,after parsing namespaces.  The regexp accounts for decorated classes,not
CppCoreGuidelines/scripts/python/cpplint.py,2759,such as in:,not
CppCoreGuidelines/scripts/python/cpplint.py,2760,class LOCKABLE API Object {,not
CppCoreGuidelines/scripts/python/cpplint.py,2761,};,not
CppCoreGuidelines/scripts/python/cpplint.py,2768,We do not want to accept classes that are actually template arguments:,not
CppCoreGuidelines/scripts/python/cpplint.py,2769,"template <class Ignore1,",not
CppCoreGuidelines/scripts/python/cpplint.py,2770,"class Ignore2 = Default<Args>,",not
CppCoreGuidelines/scripts/python/cpplint.py,2771,template <Args> class Ignore3>,not
CppCoreGuidelines/scripts/python/cpplint.py,2772,void Function() {};,not
CppCoreGuidelines/scripts/python/cpplint.py,2773,,not
CppCoreGuidelines/scripts/python/cpplint.py,2774,"To avoid template argument cases, we scan forward and look for",not
CppCoreGuidelines/scripts/python/cpplint.py,2775,"an unmatched '>'.  If we see one, assume we are inside a",not
CppCoreGuidelines/scripts/python/cpplint.py,2776,template argument list.,not
CppCoreGuidelines/scripts/python/cpplint.py,2784,"If we have not yet seen the opening brace for the innermost block,",not
CppCoreGuidelines/scripts/python/cpplint.py,2785,run checks here.,not
CppCoreGuidelines/scripts/python/cpplint.py,2789,Update access control if we are inside a class/struct,not
CppCoreGuidelines/scripts/python/cpplint.py,2799,Check that access keywords are indented +1 space.  Skip this,not
CppCoreGuidelines/scripts/python/cpplint.py,2800,check if the keywords are not preceded by whitespaces.,not
CppCoreGuidelines/scripts/python/cpplint.py,2815,Consume braces or semicolons from what's left of the line,not
CppCoreGuidelines/scripts/python/cpplint.py,2817,"Match first brace, semicolon, or closed parenthesis.",not
CppCoreGuidelines/scripts/python/cpplint.py,2824,"If namespace or class hasn't seen a opening brace yet, mark",not
CppCoreGuidelines/scripts/python/cpplint.py,2825,namespace/class head as complete.  Push a new block onto the,not
CppCoreGuidelines/scripts/python/cpplint.py,2826,stack otherwise.,not
CppCoreGuidelines/scripts/python/cpplint.py,2837,"If we haven't seen an opening brace yet, but we already saw",not
CppCoreGuidelines/scripts/python/cpplint.py,2838,"a semicolon, this is probably a forward declaration.  Pop",not
CppCoreGuidelines/scripts/python/cpplint.py,2839,the stack for these.,not
CppCoreGuidelines/scripts/python/cpplint.py,2840,,not
CppCoreGuidelines/scripts/python/cpplint.py,2841,"Similarly, if we haven't seen an opening brace yet, but we",not
CppCoreGuidelines/scripts/python/cpplint.py,2842,"already saw a closing parenthesis, then these are probably",not
CppCoreGuidelines/scripts/python/cpplint.py,2843,"function arguments with extra ""class"" or ""struct"" keywords.",not
CppCoreGuidelines/scripts/python/cpplint.py,2844,Also pop these stack for these.,not
CppCoreGuidelines/scripts/python/cpplint.py,2847,token == '}',not
CppCoreGuidelines/scripts/python/cpplint.py,2848,Perform end of block checks and pop the stack.,not
CppCoreGuidelines/scripts/python/cpplint.py,2874,Note: This test can result in false positives if #ifdef constructs,not
CppCoreGuidelines/scripts/python/cpplint.py,2875,get in the way of brace matching. See the testBuildClass test in,not
CppCoreGuidelines/scripts/python/cpplint.py,2876,cpplint_unittest.py for an example of this.,not
CppCoreGuidelines/scripts/python/cpplint.py,2917,"Remove comments from the line, but leave in strings for now.",not
CppCoreGuidelines/scripts/python/cpplint.py,2928,Remove escaped backslashes before looking for undefined escapes.,not
CppCoreGuidelines/scripts/python/cpplint.py,2935,"For the rest, work with both comments and strings removed.",not
CppCoreGuidelines/scripts/python/cpplint.py,2961,"TODO(unknown): Could it be expanded safely to arbitrary references,",SATD
CppCoreGuidelines/scripts/python/cpplint.py,2962,without triggering too many false positives? The first,not
CppCoreGuidelines/scripts/python/cpplint.py,2963,"attempt triggered 5 warnings for mostly benign code in the regtest, hence",not
CppCoreGuidelines/scripts/python/cpplint.py,2964,the restriction.,not
CppCoreGuidelines/scripts/python/cpplint.py,2965,"Here's the original regexp, for the reference:",not
CppCoreGuidelines/scripts/python/cpplint.py,2966,type_name = r'\w+((\s*::\s*\w+)|(\s*<\s*\w+?\s*>))?',not
CppCoreGuidelines/scripts/python/cpplint.py,2967,r'\s*const\s*' + type_name + '\s*&\s*\w+\s*;',not
CppCoreGuidelines/scripts/python/cpplint.py,2972,Everything else in this function operates on class declarations.,not
CppCoreGuidelines/scripts/python/cpplint.py,2973,"Return early if the top of the nesting stack is not a class, or if",not
CppCoreGuidelines/scripts/python/cpplint.py,2974,the class head is not completed yet.,not
CppCoreGuidelines/scripts/python/cpplint.py,2979,The class may have been declared with namespace or classname qualifiers.,not
CppCoreGuidelines/scripts/python/cpplint.py,2980,The constructor and destructor will not have those qualifiers.,not
CppCoreGuidelines/scripts/python/cpplint.py,2983,Look for single-argument constructors that aren't marked explicit.,not
CppCoreGuidelines/scripts/python/cpplint.py,2984,"Technically a valid construct, but against style.",not
CppCoreGuidelines/scripts/python/cpplint.py,2999,collapse arguments so that commas in template parameter lists and function,not
CppCoreGuidelines/scripts/python/cpplint.py,3000,argument parameter lists don't split arguments in two,not
CppCoreGuidelines/scripts/python/cpplint.py,3013,empty arg list,not
CppCoreGuidelines/scripts/python/cpplint.py,3014,'void' arg specifier,not
CppCoreGuidelines/scripts/python/cpplint.py,3017,exactly one arg,not
CppCoreGuidelines/scripts/python/cpplint.py,3019,all but at most one arg defaulted,not
CppCoreGuidelines/scripts/python/cpplint.py,3023,variadic arguments with zero or one argument,not
CppCoreGuidelines/scripts/python/cpplint.py,3062,Since function calls often occur inside if/for/while/switch,not
CppCoreGuidelines/scripts/python/cpplint.py,3063,"expressions - which have their own, more liberal conventions - we",not
CppCoreGuidelines/scripts/python/cpplint.py,3064,first see if we should be looking inside such an expression for a,not
CppCoreGuidelines/scripts/python/cpplint.py,3065,"function call, to which we can apply more strict standards.",not
CppCoreGuidelines/scripts/python/cpplint.py,3066,"if there's no control flow construct, look at whole line",not
CppCoreGuidelines/scripts/python/cpplint.py,3073,look inside the parens for function calls,not
CppCoreGuidelines/scripts/python/cpplint.py,3076,"Except in if/for/while/switch, there should never be space",not
CppCoreGuidelines/scripts/python/cpplint.py,3077,"immediately inside parens (eg ""f( 3, 4 )"").  We make an exception",not
CppCoreGuidelines/scripts/python/cpplint.py,3078,"for nested parens ( (a+b) + c ).  Likewise, there should never be",not
CppCoreGuidelines/scripts/python/cpplint.py,3079,a space before a ( when it's a function argument.  I assume it's a,not
CppCoreGuidelines/scripts/python/cpplint.py,3080,function argument when the char before the whitespace is legal in,not
CppCoreGuidelines/scripts/python/cpplint.py,3081,a function name (alnum + _) and we're not starting a macro. Also ignore,not
CppCoreGuidelines/scripts/python/cpplint.py,3082,pointers and references to arrays and functions coz they're too tricky:,not
CppCoreGuidelines/scripts/python/cpplint.py,3083,we use a very simple way to recognize these:,not
CppCoreGuidelines/scripts/python/cpplint.py,3084,""" (something)(maybe-something)"" or",not
CppCoreGuidelines/scripts/python/cpplint.py,3085,""" (something)(maybe-something,"" or",not
CppCoreGuidelines/scripts/python/cpplint.py,3086,""" (something)[something]""",not
CppCoreGuidelines/scripts/python/cpplint.py,3087,Note that we assume the contents of [] to be short enough that,not
CppCoreGuidelines/scripts/python/cpplint.py,3088,they'll never need to wrap.,not
CppCoreGuidelines/scripts/python/cpplint.py,3089,Ignore control structures.,not
CppCoreGuidelines/scripts/python/cpplint.py,3092,Ignore pointers/references to functions.,not
CppCoreGuidelines/scripts/python/cpplint.py,3094,Ignore pointers/references to arrays.,not
CppCoreGuidelines/scripts/python/cpplint.py,3096,a ( used for a fn call,not
CppCoreGuidelines/scripts/python/cpplint.py,3107,TODO(unknown): Space after an operator function seem to be a common,SATD
CppCoreGuidelines/scripts/python/cpplint.py,3108,"error, silence those for now by restricting them to highest verbosity.",not
CppCoreGuidelines/scripts/python/cpplint.py,3115,"If the ) is followed only by a newline or a { + newline, assume it's",not
CppCoreGuidelines/scripts/python/cpplint.py,3116,"part of a control statement (if/while/etc), and don't complain",not
CppCoreGuidelines/scripts/python/cpplint.py,3118,"If the closing parenthesis is preceded by only whitespaces,",not
CppCoreGuidelines/scripts/python/cpplint.py,3119,try to give a more descriptive error message.,not
CppCoreGuidelines/scripts/python/cpplint.py,3185,decls * & space::name( ...,not
CppCoreGuidelines/scripts/python/cpplint.py,3188,"If the name is all caps and underscores, figure it's a macro and",not
CppCoreGuidelines/scripts/python/cpplint.py,3189,"ignore it, unless it's TEST or TEST_F.",not
CppCoreGuidelines/scripts/python/cpplint.py,3200,Declarations and trivial functions,not
CppCoreGuidelines/scripts/python/cpplint.py,3202,... ignore,not
CppCoreGuidelines/scripts/python/cpplint.py,3206,Handle TEST... macros,not
CppCoreGuidelines/scripts/python/cpplint.py,3208,Ignore bad syntax,not
CppCoreGuidelines/scripts/python/cpplint.py,3215,No body for the function (or evidence of a non-function) was found.,not
CppCoreGuidelines/scripts/python/cpplint.py,3218,function end,not
CppCoreGuidelines/scripts/python/cpplint.py,3222,Count non-blank/non-comment lines.,not
CppCoreGuidelines/scripts/python/cpplint.py,3240,"Check if the // may be in quotes.  If so, ignore it",not
CppCoreGuidelines/scripts/python/cpplint.py,3242,"Allow one space for new scopes, two spaces otherwise:",not
CppCoreGuidelines/scripts/python/cpplint.py,3251,Checks for common mistakes in TODO comments.,SATD
CppCoreGuidelines/scripts/python/cpplint.py,3255,One whitespace is correct; zero whitespace is handled elsewhere.,not
CppCoreGuidelines/scripts/python/cpplint.py,3268,Comparisons made explicit for correctness -- pylint: disable=g-explicit-bool-comparison,not
CppCoreGuidelines/scripts/python/cpplint.py,3273,"If the comment contains an alphanumeric character, there",not
CppCoreGuidelines/scripts/python/cpplint.py,3274,should be a space somewhere between it and the // unless,not
CppCoreGuidelines/scripts/python/cpplint.py,3275,it's a /// or //! Doxygen comment.,not
CppCoreGuidelines/scripts/python/cpplint.py,3293,get rid of comments and strings,not
CppCoreGuidelines/scripts/python/cpplint.py,3305,"Found DISALLOW* macro outside a class declaration, or perhaps it",not
CppCoreGuidelines/scripts/python/cpplint.py,3306,was used inside a function when it should have been part of the,not
CppCoreGuidelines/scripts/python/cpplint.py,3307,"class declaration.  We could issue a warning here, but it",not
CppCoreGuidelines/scripts/python/cpplint.py,3308,probably resulted in a compiler error already.,not
CppCoreGuidelines/scripts/python/cpplint.py,3330,"Don't use ""elided"" lines here, otherwise we can't check commented lines.",not
CppCoreGuidelines/scripts/python/cpplint.py,3331,"Don't want to use ""raw"" either, because we don't want to check inside C++11",not
CppCoreGuidelines/scripts/python/cpplint.py,3332,"raw strings,",not
CppCoreGuidelines/scripts/python/cpplint.py,3336,"Before nixing comments, check if the line is blank for no good",not
CppCoreGuidelines/scripts/python/cpplint.py,3337,"reason.  This includes the first line after a block is opened, and",not
CppCoreGuidelines/scripts/python/cpplint.py,3338,"blank lines at the end of a function (ie, right before a line like '}'",not
CppCoreGuidelines/scripts/python/cpplint.py,3339,,not
CppCoreGuidelines/scripts/python/cpplint.py,3340,Skip all the blank line checks if we are immediately inside a,not
CppCoreGuidelines/scripts/python/cpplint.py,3341,"namespace body.  In other words, don't issue blank line warnings",not
CppCoreGuidelines/scripts/python/cpplint.py,3342,for this block:,not
CppCoreGuidelines/scripts/python/cpplint.py,3343,namespace {,not
CppCoreGuidelines/scripts/python/cpplint.py,3344,,not
CppCoreGuidelines/scripts/python/cpplint.py,3345,},not
CppCoreGuidelines/scripts/python/cpplint.py,3346,,not
CppCoreGuidelines/scripts/python/cpplint.py,3347,A warning about missing end of namespace comments will be issued instead.,not
CppCoreGuidelines/scripts/python/cpplint.py,3348,,not
CppCoreGuidelines/scripts/python/cpplint.py,3349,"Also skip blank line checks for 'extern ""C""' blocks, which are formatted",not
CppCoreGuidelines/scripts/python/cpplint.py,3350,like namespaces.,not
CppCoreGuidelines/scripts/python/cpplint.py,3357,"TODO(unknown): Don't complain if line before blank line, and line after,",SATD
CppCoreGuidelines/scripts/python/cpplint.py,3358,both start with alnums and are indented the same amount.,not
CppCoreGuidelines/scripts/python/cpplint.py,3359,This ignores whitespace at the start of a namespace block,not
CppCoreGuidelines/scripts/python/cpplint.py,3360,because those are not usually indented.,not
CppCoreGuidelines/scripts/python/cpplint.py,3362,"OK, we have a blank line at the start of a code block.  Before we",not
CppCoreGuidelines/scripts/python/cpplint.py,3363,"complain, we check if it is an exception to the rule: The previous",not
CppCoreGuidelines/scripts/python/cpplint.py,3364,non-empty line has the parameters of a function header that are indented,not
CppCoreGuidelines/scripts/python/cpplint.py,3365,4 spaces (because they did not fit in a 80 column line when placed on,not
CppCoreGuidelines/scripts/python/cpplint.py,3366,the same line as the function name).  We also check for the case where,not
CppCoreGuidelines/scripts/python/cpplint.py,3367,"the previous line is indented 6 spaces, which may happen when the",not
CppCoreGuidelines/scripts/python/cpplint.py,3368,initializers of a constructor do not fit into a 80 column line.,not
CppCoreGuidelines/scripts/python/cpplint.py,3370,Initializer list?,not
CppCoreGuidelines/scripts/python/cpplint.py,3371,"We are looking for the opening column of initializer list, which",not
CppCoreGuidelines/scripts/python/cpplint.py,3372,should be indented 4 spaces to cause 6 space indentation afterwards.,not
CppCoreGuidelines/scripts/python/cpplint.py,3380,Search for the function arguments or an initializer list.  We use a,SATD
CppCoreGuidelines/scripts/python/cpplint.py,3381,simple heuristic here: If the line is indented 4 spaces; and we have a,not
CppCoreGuidelines/scripts/python/cpplint.py,3382,"closing paren, without the opening paren, followed by an opening brace",not
CppCoreGuidelines/scripts/python/cpplint.py,3383,or colon (for initializer lists) we assume that it is the last line of,not
CppCoreGuidelines/scripts/python/cpplint.py,3384,"a function header.  If we have a colon indented 4 spaces, it is an",not
CppCoreGuidelines/scripts/python/cpplint.py,3385,initializer list.,not
CppCoreGuidelines/scripts/python/cpplint.py,3394,Ignore blank lines at the end of a block in a long if-else,not
CppCoreGuidelines/scripts/python/cpplint.py,3395,"chain, like this:",not
CppCoreGuidelines/scripts/python/cpplint.py,3396,if (condition1) {,not
CppCoreGuidelines/scripts/python/cpplint.py,3397,// Something followed by a blank line,not
CppCoreGuidelines/scripts/python/cpplint.py,3398,,not
CppCoreGuidelines/scripts/python/cpplint.py,3399,} else if (condition2) {,not
CppCoreGuidelines/scripts/python/cpplint.py,3400,// Something else,not
CppCoreGuidelines/scripts/python/cpplint.py,3401,},not
CppCoreGuidelines/scripts/python/cpplint.py,3416,"Next, check comments",not
CppCoreGuidelines/scripts/python/cpplint.py,3423,get rid of comments and strings,not
CppCoreGuidelines/scripts/python/cpplint.py,3426,"You shouldn't have spaces before your brackets, except maybe after",not
CppCoreGuidelines/scripts/python/cpplint.py,3427,'delete []' or 'return []() {};',not
CppCoreGuidelines/scripts/python/cpplint.py,3432,"In range-based for, we wanted spaces before and after the colon, but",not
CppCoreGuidelines/scripts/python/cpplint.py,3433,"not around ""::"" tokens that might appear.",not
CppCoreGuidelines/scripts/python/cpplint.py,3451,Don't try to do spacing checks for operator methods.  Do this by,not
CppCoreGuidelines/scripts/python/cpplint.py,3452,"replacing the troublesome characters with something else,",not
CppCoreGuidelines/scripts/python/cpplint.py,3453,preserving column position for all other characters.,not
CppCoreGuidelines/scripts/python/cpplint.py,3454,,not
CppCoreGuidelines/scripts/python/cpplint.py,3455,The replacement is done repeatedly to avoid false positives from,not
CppCoreGuidelines/scripts/python/cpplint.py,3456,operators that call operators.,not
CppCoreGuidelines/scripts/python/cpplint.py,3464,"We allow no-spaces around = within an if: ""if ( (a=Foo()) == 0 )"".",not
CppCoreGuidelines/scripts/python/cpplint.py,3465,Otherwise not.  Note we only check for non-spaces on *both* sides;,not
CppCoreGuidelines/scripts/python/cpplint.py,3466,sometimes people put non-spaces on one side when aligning ='s among,not
CppCoreGuidelines/scripts/python/cpplint.py,3467,many lines (not that this is behavior that I approve of...),not
CppCoreGuidelines/scripts/python/cpplint.py,3471,Operators taken from [lex.operators] in C++11 standard.,not
CppCoreGuidelines/scripts/python/cpplint.py,3477,"It's ok not to have spaces around binary operators like + - * /, but if",not
CppCoreGuidelines/scripts/python/cpplint.py,3478,"there's too little whitespace, we get concerned.  It's hard to tell,",not
CppCoreGuidelines/scripts/python/cpplint.py,3479,"though, so we punt on this one for now.  TODO.",SATD
CppCoreGuidelines/scripts/python/cpplint.py,3481,You should always have whitespace around binary operators.,not
CppCoreGuidelines/scripts/python/cpplint.py,3482,,not
CppCoreGuidelines/scripts/python/cpplint.py,3483,"Check <= and >= first to avoid false positives with < and >, then",not
CppCoreGuidelines/scripts/python/cpplint.py,3484,check non-include lines for spacing around < and >.,not
CppCoreGuidelines/scripts/python/cpplint.py,3485,,not
CppCoreGuidelines/scripts/python/cpplint.py,3486,"If the operator is followed by a comma, assume it's be used in a",not
CppCoreGuidelines/scripts/python/cpplint.py,3487,macro context and don't do any checks.  This avoids false,not
CppCoreGuidelines/scripts/python/cpplint.py,3488,positives.,not
CppCoreGuidelines/scripts/python/cpplint.py,3489,,not
CppCoreGuidelines/scripts/python/cpplint.py,3490,Note that && is not included here.  This is because there are too,not
CppCoreGuidelines/scripts/python/cpplint.py,3491,many false positives due to RValue references.,not
CppCoreGuidelines/scripts/python/cpplint.py,3497,Look for < that is not surrounded by spaces.  This is only,not
CppCoreGuidelines/scripts/python/cpplint.py,3498,"triggered if both sides are missing spaces, even though",not
CppCoreGuidelines/scripts/python/cpplint.py,3499,technically should should flag if at least one side is missing a,not
CppCoreGuidelines/scripts/python/cpplint.py,3500,space.  This is done to avoid some false positives with shifts.,not
CppCoreGuidelines/scripts/python/cpplint.py,3509,Look for > that is not surrounded by spaces.  Similar to the,not
CppCoreGuidelines/scripts/python/cpplint.py,3510,"above, we only trigger if both sides are missing spaces to avoid",not
CppCoreGuidelines/scripts/python/cpplint.py,3511,false positives with shifts.,not
CppCoreGuidelines/scripts/python/cpplint.py,3520,"We allow no-spaces around << when used like this: 10<<20, but",not
CppCoreGuidelines/scripts/python/cpplint.py,3521,"not otherwise (particularly, not when used as streams)",not
CppCoreGuidelines/scripts/python/cpplint.py,3522,,not
CppCoreGuidelines/scripts/python/cpplint.py,3523,"We also allow operators following an opening parenthesis, since",not
CppCoreGuidelines/scripts/python/cpplint.py,3524,those tend to be macros that deal with operators.,not
CppCoreGuidelines/scripts/python/cpplint.py,3531,We allow no-spaces around >> for almost anything.  This is because,not
CppCoreGuidelines/scripts/python/cpplint.py,3532,"C++11 allows "">>"" to close nested templates, which accounts for",not
CppCoreGuidelines/scripts/python/cpplint.py,3533,"most cases when "">>"" is not followed by a space.",not
CppCoreGuidelines/scripts/python/cpplint.py,3534,,not
CppCoreGuidelines/scripts/python/cpplint.py,3535,"We still warn on "">>"" followed by alpha character, because that is",not
CppCoreGuidelines/scripts/python/cpplint.py,3536,"likely due to "">>"" being used for right shifts, e.g.:",not
CppCoreGuidelines/scripts/python/cpplint.py,3537,value >> alpha,not
CppCoreGuidelines/scripts/python/cpplint.py,3538,,not
CppCoreGuidelines/scripts/python/cpplint.py,3539,"When "">>"" is used to close templates, the alphanumeric letter that",not
CppCoreGuidelines/scripts/python/cpplint.py,3540,"follows would be part of an identifier, and there should still be",not
CppCoreGuidelines/scripts/python/cpplint.py,3541,a space separating the template type and the identifier.,not
CppCoreGuidelines/scripts/python/cpplint.py,3542,type<type<type>> alpha,not
CppCoreGuidelines/scripts/python/cpplint.py,3548,There shouldn't be space around unary operators,SATD
CppCoreGuidelines/scripts/python/cpplint.py,3566,"No spaces after an if, while, switch, or for",not
CppCoreGuidelines/scripts/python/cpplint.py,3572,"For if/for/while/switch, the left and right parens should be",not
CppCoreGuidelines/scripts/python/cpplint.py,3573,"consistent about how many spaces are inside the parens, and",not
CppCoreGuidelines/scripts/python/cpplint.py,3574,there should either be zero or one spaces inside the parens.,not
CppCoreGuidelines/scripts/python/cpplint.py,3575,"We don't want: ""if ( foo)"" or ""if ( foo   )"".",not
CppCoreGuidelines/scripts/python/cpplint.py,3576,"Exception: ""for ( ; foo; bar)"" and ""for (foo; bar; )"" are allowed.",not
CppCoreGuidelines/scripts/python/cpplint.py,3605,You should always have a space after a comma (either as fn arg or operator),not
CppCoreGuidelines/scripts/python/cpplint.py,3606,,not
CppCoreGuidelines/scripts/python/cpplint.py,3607,This does not apply when the non-space character following the,not
CppCoreGuidelines/scripts/python/cpplint.py,3608,"comma is another comma, since the only time when that happens is",not
CppCoreGuidelines/scripts/python/cpplint.py,3609,for empty macro arguments.,not
CppCoreGuidelines/scripts/python/cpplint.py,3610,,not
CppCoreGuidelines/scripts/python/cpplint.py,3611,We run this check in two passes: first pass on elided lines to,not
CppCoreGuidelines/scripts/python/cpplint.py,3612,"verify that lines contain missing whitespaces, second pass on raw",not
CppCoreGuidelines/scripts/python/cpplint.py,3613,lines to confirm that those missing whitespaces are not due to,not
CppCoreGuidelines/scripts/python/cpplint.py,3614,elided comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,3620,You should always have a space after a semicolon,not
CppCoreGuidelines/scripts/python/cpplint.py,3621,except for few corner cases,not
CppCoreGuidelines/scripts/python/cpplint.py,3622,TODO(unknown): clarify if 'if (1) { return 1;}' is requires one more,SATD
CppCoreGuidelines/scripts/python/cpplint.py,3623,space after ;,not
CppCoreGuidelines/scripts/python/cpplint.py,3640,Keep only the last token in the expression,not
CppCoreGuidelines/scripts/python/cpplint.py,3647,Match native types and stdint types,not
CppCoreGuidelines/scripts/python/cpplint.py,3651,Try a bit harder to match templated types.  Walk up the nesting,not
CppCoreGuidelines/scripts/python/cpplint.py,3652,stack until we find something that resembles a typename,not
CppCoreGuidelines/scripts/python/cpplint.py,3653,declaration for what we are looking for.,not
CppCoreGuidelines/scripts/python/cpplint.py,3661,Found where the opening brace is.  We want to scan from this,not
CppCoreGuidelines/scripts/python/cpplint.py,3662,"line up to the beginning of the function, minus a few lines.",not
CppCoreGuidelines/scripts/python/cpplint.py,3663,"template <typename Type1,  // stop scanning here",not
CppCoreGuidelines/scripts/python/cpplint.py,3664,...>,not
CppCoreGuidelines/scripts/python/cpplint.py,3665,class C,not
CppCoreGuidelines/scripts/python/cpplint.py,3666,: public ... {  // start scanning here,not
CppCoreGuidelines/scripts/python/cpplint.py,3678,"Didn't find any ""template"" keyword before reaching the next block,",not
CppCoreGuidelines/scripts/python/cpplint.py,3679,there are probably no template things to check for this block,not
CppCoreGuidelines/scripts/python/cpplint.py,3683,Look for typename in the specified range,not
CppCoreGuidelines/scripts/python/cpplint.py,3705,"Except after an opening paren, or after another opening brace (in case of",not
CppCoreGuidelines/scripts/python/cpplint.py,3706,"an initializer list, for instance), you should have spaces before your",not
CppCoreGuidelines/scripts/python/cpplint.py,3707,"braces when they are delimiting blocks, classes, namespaces etc.",not
CppCoreGuidelines/scripts/python/cpplint.py,3708,"And since you should never have braces at the beginning of a line,",not
CppCoreGuidelines/scripts/python/cpplint.py,3709,this is an easy test.  Except that braces used for initialization don't,not
CppCoreGuidelines/scripts/python/cpplint.py,3710,follow the same rule; we often don't want spaces before those.,not
CppCoreGuidelines/scripts/python/cpplint.py,3714,Try a bit harder to check for brace initialization.  This,not
CppCoreGuidelines/scripts/python/cpplint.py,3715,happens in one of the following forms:,not
CppCoreGuidelines/scripts/python/cpplint.py,3716,Constructor() : initializer_list_{} { ... },not
CppCoreGuidelines/scripts/python/cpplint.py,3717,Constructor{}.MemberFunction(),not
CppCoreGuidelines/scripts/python/cpplint.py,3718,Type variable{};,not
CppCoreGuidelines/scripts/python/cpplint.py,3719,"FunctionCall(type{}, ...);",not
CppCoreGuidelines/scripts/python/cpplint.py,3720,"LastArgument(..., type{});",not
CppCoreGuidelines/scripts/python/cpplint.py,3721,"LOG(INFO) << type{} << "" ..."";",not
CppCoreGuidelines/scripts/python/cpplint.py,3722,map_of_type[{...}] = ...;,not
CppCoreGuidelines/scripts/python/cpplint.py,3723,ternary = expr ? new type{} : nullptr;,not
CppCoreGuidelines/scripts/python/cpplint.py,3724,OuterTemplate<InnerTemplateConstructor<Type>{}>,not
CppCoreGuidelines/scripts/python/cpplint.py,3725,,not
CppCoreGuidelines/scripts/python/cpplint.py,3726,"We check for the character following the closing brace, and",not
CppCoreGuidelines/scripts/python/cpplint.py,3727,"silence the warning if it's one of those listed above, i.e.",not
CppCoreGuidelines/scripts/python/cpplint.py,3728,"""{.;,)<>]:"".",not
CppCoreGuidelines/scripts/python/cpplint.py,3729,,not
CppCoreGuidelines/scripts/python/cpplint.py,3730,"To account for nested initializer list, we allow any number of",not
CppCoreGuidelines/scripts/python/cpplint.py,3731,"closing braces up to ""{;,)<"".  We can't simply silence the",not
CppCoreGuidelines/scripts/python/cpplint.py,3732,"warning on first sight of closing brace, because that would",not
CppCoreGuidelines/scripts/python/cpplint.py,3733,cause false negatives for things that are not initializer lists.,not
CppCoreGuidelines/scripts/python/cpplint.py,3734,Silence this:         But not this:,not
CppCoreGuidelines/scripts/python/cpplint.py,3735,Outer{                if (...) {,not
CppCoreGuidelines/scripts/python/cpplint.py,3736,Inner{...}            if (...){  // Missing space before {,not
CppCoreGuidelines/scripts/python/cpplint.py,3737,};                    },not
CppCoreGuidelines/scripts/python/cpplint.py,3738,,not
CppCoreGuidelines/scripts/python/cpplint.py,3739,There is a false negative with this approach if people inserted,not
CppCoreGuidelines/scripts/python/cpplint.py,3740,"spurious semicolons, e.g. ""if (cond){};"", but we will catch the",not
CppCoreGuidelines/scripts/python/cpplint.py,3741,spurious semicolon with a separate check.,not
CppCoreGuidelines/scripts/python/cpplint.py,3751,"We also suppress warnings for `uint64_t{expression}` etc., as the style",not
CppCoreGuidelines/scripts/python/cpplint.py,3752,guide recommends brace initialization for integral types to avoid,not
CppCoreGuidelines/scripts/python/cpplint.py,3753,overflow/truncation.,not
CppCoreGuidelines/scripts/python/cpplint.py,3759,Make sure '} else {' has spaces.,not
CppCoreGuidelines/scripts/python/cpplint.py,3764,You shouldn't have a space before a semicolon at the end of the line.,not
CppCoreGuidelines/scripts/python/cpplint.py,3765,"There's a special case for ""for"" since the style guide allows space before",not
CppCoreGuidelines/scripts/python/cpplint.py,3766,the semicolon there.,not
CppCoreGuidelines/scripts/python/cpplint.py,3810,"Skip checks if the class is small, where small means 25 lines or less.",not
CppCoreGuidelines/scripts/python/cpplint.py,3811,25 lines seems like a good cutoff since that's the usual height of,not
CppCoreGuidelines/scripts/python/cpplint.py,3812,"terminals, and any class that can't fit in one screen can't really",not
CppCoreGuidelines/scripts/python/cpplint.py,3813,"be considered ""small"".",not
CppCoreGuidelines/scripts/python/cpplint.py,3814,,not
CppCoreGuidelines/scripts/python/cpplint.py,3815,Also skip checks if we are on the first line.  This accounts for,not
CppCoreGuidelines/scripts/python/cpplint.py,3816,classes that look like,not
CppCoreGuidelines/scripts/python/cpplint.py,3817,class Foo { public: ... };,not
CppCoreGuidelines/scripts/python/cpplint.py,3818,,not
CppCoreGuidelines/scripts/python/cpplint.py,3819,"If we didn't find the end of the class, last_line would be zero,",not
CppCoreGuidelines/scripts/python/cpplint.py,3820,and the check will be skipped by the first condition.,not
CppCoreGuidelines/scripts/python/cpplint.py,3827,Issue warning if the line before public/protected/private was,not
CppCoreGuidelines/scripts/python/cpplint.py,3828,"not a blank line, but don't do this if the previous line contains",not
CppCoreGuidelines/scripts/python/cpplint.py,3829,"""class"" or ""struct"".  This can happen two ways:",not
CppCoreGuidelines/scripts/python/cpplint.py,3830,- We are at the beginning of the class.,not
CppCoreGuidelines/scripts/python/cpplint.py,3831,- We are forward-declaring an inner class that is semantically,not
CppCoreGuidelines/scripts/python/cpplint.py,3832,"private, but needed to be public for implementation reasons.",not
CppCoreGuidelines/scripts/python/cpplint.py,3833,Also ignores cases where the previous line ends with a backslash as can be,not
CppCoreGuidelines/scripts/python/cpplint.py,3834,common when defining classes in C macros.,not
CppCoreGuidelines/scripts/python/cpplint.py,3839,Try a bit harder to find the beginning of the class.  This is to,not
CppCoreGuidelines/scripts/python/cpplint.py,3840,"account for multi-line base-specifier lists, e.g.:",not
CppCoreGuidelines/scripts/python/cpplint.py,3841,class Derived,not
CppCoreGuidelines/scripts/python/cpplint.py,3842,: public Base {,not
CppCoreGuidelines/scripts/python/cpplint.py,3870,if not a blank line...,not
CppCoreGuidelines/scripts/python/cpplint.py,3886,get rid of comments and strings,not
CppCoreGuidelines/scripts/python/cpplint.py,3889,We allow an open brace to start a line in the case where someone is using,not
CppCoreGuidelines/scripts/python/cpplint.py,3890,"braces in a block to explicitly create a new scope, which is commonly used",not
CppCoreGuidelines/scripts/python/cpplint.py,3891,to control the lifetime of stack-allocated variables.  Braces are also,not
CppCoreGuidelines/scripts/python/cpplint.py,3892,used for brace initializers inside function calls.  We don't detect this,not
CppCoreGuidelines/scripts/python/cpplint.py,3893,perfectly: we just don't complain if the last non-whitespace character on,not
CppCoreGuidelines/scripts/python/cpplint.py,3894,"the previous non-blank line is ',', ';', ':', '(', '{', or '}', or if the",not
CppCoreGuidelines/scripts/python/cpplint.py,3895,previous line starts a preprocessor block. We also allow a brace on the,not
CppCoreGuidelines/scripts/python/cpplint.py,3896,following line if it is part of an array initialization and would not fit,not
CppCoreGuidelines/scripts/python/cpplint.py,3897,within the 80 character limit of the preceding line.,not
CppCoreGuidelines/scripts/python/cpplint.py,3905,An else clause should be on the same line as the preceding closing brace.,not
CppCoreGuidelines/scripts/python/cpplint.py,3912,"If braces come on one side of an else, they should be on both.",not
CppCoreGuidelines/scripts/python/cpplint.py,3913,"However, we have to worry about ""else if"" that spans multiple lines!",not
CppCoreGuidelines/scripts/python/cpplint.py,3914,could be multi-line if,not
CppCoreGuidelines/scripts/python/cpplint.py,3916,find the ( after the if,not
CppCoreGuidelines/scripts/python/cpplint.py,3922,must be brace after if,not
CppCoreGuidelines/scripts/python/cpplint.py,3929,"Likewise, an else should never have the else clause on the same line",not
CppCoreGuidelines/scripts/python/cpplint.py,3934,"In the same way, a do/while should never be on one line",not
CppCoreGuidelines/scripts/python/cpplint.py,3939,Check single-line if/else bodies. The style guide says 'curly braces are not,not
CppCoreGuidelines/scripts/python/cpplint.py,3940,"required for single-line statements'. We additionally allow multi-line,",not
CppCoreGuidelines/scripts/python/cpplint.py,3941,"single statements, but we reject anything with more than one semicolon in",not
CppCoreGuidelines/scripts/python/cpplint.py,3942,it. This means that the first semicolon after the if should be at the end of,not
CppCoreGuidelines/scripts/python/cpplint.py,3943,"its line, and the line after that should have an indent level equal to or",not
CppCoreGuidelines/scripts/python/cpplint.py,3944,lower than the if. We also check for ambiguous if/else nesting without,not
CppCoreGuidelines/scripts/python/cpplint.py,3945,braces.,not
CppCoreGuidelines/scripts/python/cpplint.py,3952,"This could be a multiline if condition, so find the end first.",not
CppCoreGuidelines/scripts/python/cpplint.py,3955,"Check for an opening brace, either directly after the if or on the next",not
CppCoreGuidelines/scripts/python/cpplint.py,3956,"line. If found, this isn't a single-statement conditional.",not
CppCoreGuidelines/scripts/python/cpplint.py,3967,We allow a mix of whitespace and closing braces (e.g. for one-liner,not
CppCoreGuidelines/scripts/python/cpplint.py,3968,methods) and a single \ after the semicolon (for macros),not
CppCoreGuidelines/scripts/python/cpplint.py,3971,"Semicolon isn't the last character, there's something trailing.",not
CppCoreGuidelines/scripts/python/cpplint.py,3972,Output a warning if the semicolon is not contained inside,not
CppCoreGuidelines/scripts/python/cpplint.py,3973,a lambda expression.,not
CppCoreGuidelines/scripts/python/cpplint.py,3979,Make sure the next line is dedented,not
CppCoreGuidelines/scripts/python/cpplint.py,3982,"With ambiguous nested if statements, this will error out on the",not
CppCoreGuidelines/scripts/python/cpplint.py,3983,"if that *doesn't* match the else, regardless of whether it's the",not
CppCoreGuidelines/scripts/python/cpplint.py,3984,inner one or outer one.,not
CppCoreGuidelines/scripts/python/cpplint.py,4007,Block bodies should not be followed by a semicolon.  Due to C++11,not
CppCoreGuidelines/scripts/python/cpplint.py,4008,"brace initialization, there are more places where semicolons are",not
CppCoreGuidelines/scripts/python/cpplint.py,4009,"required than not, so we use a whitelist approach to check these",not
CppCoreGuidelines/scripts/python/cpplint.py,4010,"rather than a blacklist.  These are the places where ""};"" should",not
CppCoreGuidelines/scripts/python/cpplint.py,4011,"be replaced by just ""}"":",not
CppCoreGuidelines/scripts/python/cpplint.py,4012,1. Some flavor of block following closing parenthesis:,not
CppCoreGuidelines/scripts/python/cpplint.py,4013,for (;;) {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4014,while (...) {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4015,switch (...) {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4016,Function(...) {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4017,if (...) {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4018,if (...) else if (...) {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4019,,not
CppCoreGuidelines/scripts/python/cpplint.py,4020,2. else block:,not
CppCoreGuidelines/scripts/python/cpplint.py,4021,if (...) else {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4022,,not
CppCoreGuidelines/scripts/python/cpplint.py,4023,3. const member function:,not
CppCoreGuidelines/scripts/python/cpplint.py,4024,Function(...) const {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4025,,not
CppCoreGuidelines/scripts/python/cpplint.py,4026,4. Block following some statement:,not
CppCoreGuidelines/scripts/python/cpplint.py,4027,x = 42;,not
CppCoreGuidelines/scripts/python/cpplint.py,4028,{};,not
CppCoreGuidelines/scripts/python/cpplint.py,4029,,not
CppCoreGuidelines/scripts/python/cpplint.py,4030,5. Block at the beginning of a function:,not
CppCoreGuidelines/scripts/python/cpplint.py,4031,Function(...) {,not
CppCoreGuidelines/scripts/python/cpplint.py,4032,{};,not
CppCoreGuidelines/scripts/python/cpplint.py,4033,},not
CppCoreGuidelines/scripts/python/cpplint.py,4034,,not
CppCoreGuidelines/scripts/python/cpplint.py,4035,"Note that naively checking for the preceding ""{"" will also match",not
CppCoreGuidelines/scripts/python/cpplint.py,4036,"braces inside multi-dimensional arrays, but this is fine since",not
CppCoreGuidelines/scripts/python/cpplint.py,4037,that expression will not contain semicolons.,not
CppCoreGuidelines/scripts/python/cpplint.py,4038,,not
CppCoreGuidelines/scripts/python/cpplint.py,4039,6. Block following another block:,not
CppCoreGuidelines/scripts/python/cpplint.py,4040,while (true) {},not
CppCoreGuidelines/scripts/python/cpplint.py,4041,{};,not
CppCoreGuidelines/scripts/python/cpplint.py,4042,,not
CppCoreGuidelines/scripts/python/cpplint.py,4043,7. End of namespaces:,not
CppCoreGuidelines/scripts/python/cpplint.py,4044,namespace {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4045,,not
CppCoreGuidelines/scripts/python/cpplint.py,4046,These semicolons seems far more common than other kinds of,not
CppCoreGuidelines/scripts/python/cpplint.py,4047,"redundant semicolons, possibly due to people converting classes",not
CppCoreGuidelines/scripts/python/cpplint.py,4048,to namespaces.  For now we do not warn for this case.,not
CppCoreGuidelines/scripts/python/cpplint.py,4049,,not
CppCoreGuidelines/scripts/python/cpplint.py,4050,Try matching case 1 first.,not
CppCoreGuidelines/scripts/python/cpplint.py,4053,Matched closing parenthesis (case 1).  Check the token before the,not
CppCoreGuidelines/scripts/python/cpplint.py,4054,"matching opening parenthesis, and don't warn if it looks like a",not
CppCoreGuidelines/scripts/python/cpplint.py,4055,macro.  This avoids these false positives:,not
CppCoreGuidelines/scripts/python/cpplint.py,4056,- macro that defines a base class,not
CppCoreGuidelines/scripts/python/cpplint.py,4057,- multi-line macro that defines a base class,not
CppCoreGuidelines/scripts/python/cpplint.py,4058,- macro that defines the whole class-head,not
CppCoreGuidelines/scripts/python/cpplint.py,4059,,not
CppCoreGuidelines/scripts/python/cpplint.py,4060,But we still issue warnings for macros that we know are safe to,not
CppCoreGuidelines/scripts/python/cpplint.py,4061,"warn, specifically:",not
CppCoreGuidelines/scripts/python/cpplint.py,4062,"- TEST, TEST_F, TEST_P, MATCHER, MATCHER_P",not
CppCoreGuidelines/scripts/python/cpplint.py,4063,- TYPED_TEST,not
CppCoreGuidelines/scripts/python/cpplint.py,4064,- INTERFACE_DEF,not
CppCoreGuidelines/scripts/python/cpplint.py,4065,"- EXCLUSIVE_LOCKS_REQUIRED, SHARED_LOCKS_REQUIRED, LOCKS_EXCLUDED:",not
CppCoreGuidelines/scripts/python/cpplint.py,4066,,not
CppCoreGuidelines/scripts/python/cpplint.py,4067,We implement a whitelist of safe macros instead of a blacklist of,not
CppCoreGuidelines/scripts/python/cpplint.py,4068,"unsafe macros, even though the latter appears less frequently in",not
CppCoreGuidelines/scripts/python/cpplint.py,4069,google code and would have been easier to implement.  This is because,not
CppCoreGuidelines/scripts/python/cpplint.py,4070,the downside for getting the whitelist wrong means some extra,not
CppCoreGuidelines/scripts/python/cpplint.py,4071,"semicolons, while the downside for getting the blacklist wrong",not
CppCoreGuidelines/scripts/python/cpplint.py,4072,would result in compile errors.,not
CppCoreGuidelines/scripts/python/cpplint.py,4073,,not
CppCoreGuidelines/scripts/python/cpplint.py,4074,"In addition to macros, we also don't want to warn on",not
CppCoreGuidelines/scripts/python/cpplint.py,4075,- Compound literals,not
CppCoreGuidelines/scripts/python/cpplint.py,4076,- Lambdas,not
CppCoreGuidelines/scripts/python/cpplint.py,4077,- alignas specifier with anonymous structs,not
CppCoreGuidelines/scripts/python/cpplint.py,4078,- decltype,not
CppCoreGuidelines/scripts/python/cpplint.py,4100,Multi-line lambda-expression,not
CppCoreGuidelines/scripts/python/cpplint.py,4104,Try matching cases 2-3.,not
CppCoreGuidelines/scripts/python/cpplint.py,4107,Try matching cases 4-6.  These are always matched on separate lines.,not
CppCoreGuidelines/scripts/python/cpplint.py,4108,,not
CppCoreGuidelines/scripts/python/cpplint.py,4109,Note that we can't simply concatenate the previous line to the,not
CppCoreGuidelines/scripts/python/cpplint.py,4110,"current line and do a single match, otherwise we may output",not
CppCoreGuidelines/scripts/python/cpplint.py,4111,duplicate warnings for the blank line case:,not
CppCoreGuidelines/scripts/python/cpplint.py,4112,if (cond) {,not
CppCoreGuidelines/scripts/python/cpplint.py,4113,// blank line,not
CppCoreGuidelines/scripts/python/cpplint.py,4114,},not
CppCoreGuidelines/scripts/python/cpplint.py,4119,Check matching closing brace,not
CppCoreGuidelines/scripts/python/cpplint.py,4124,"Current {} pair is eligible for semicolon check, and we have found",not
CppCoreGuidelines/scripts/python/cpplint.py,4125,"the redundant semicolon, output warning here.",not
CppCoreGuidelines/scripts/python/cpplint.py,4126,,not
CppCoreGuidelines/scripts/python/cpplint.py,4127,"Note: because we are scanning forward for opening braces, and",not
CppCoreGuidelines/scripts/python/cpplint.py,4128,"outputting warnings for the matching closing brace, if there are",not
CppCoreGuidelines/scripts/python/cpplint.py,4129,"nested blocks with trailing semicolons, we will get the error",not
CppCoreGuidelines/scripts/python/cpplint.py,4130,messages in reversed order.,not
CppCoreGuidelines/scripts/python/cpplint.py,4132,We need to check the line forward for NOLINT,not
CppCoreGuidelines/scripts/python/cpplint.py,4153,Search for loop keywords at the beginning of the line.  Because only,not
CppCoreGuidelines/scripts/python/cpplint.py,4154,"whitespaces are allowed before the keywords, this will also ignore most",not
CppCoreGuidelines/scripts/python/cpplint.py,4155,"do-while-loops, since those lines should start with closing brace.",not
CppCoreGuidelines/scripts/python/cpplint.py,4156,,not
CppCoreGuidelines/scripts/python/cpplint.py,4157,"We also check ""if"" blocks here, since an empty conditional block",not
CppCoreGuidelines/scripts/python/cpplint.py,4158,is likely an error.,not
CppCoreGuidelines/scripts/python/cpplint.py,4162,Find the end of the conditional expression.,not
CppCoreGuidelines/scripts/python/cpplint.py,4166,Output warning if what follows the condition expression is a semicolon.,not
CppCoreGuidelines/scripts/python/cpplint.py,4167,"No warning for all other cases, including whitespace or newline, since we",not
CppCoreGuidelines/scripts/python/cpplint.py,4168,have a separate check for semicolons preceded by whitespace.,not
CppCoreGuidelines/scripts/python/cpplint.py,4177,Check for if statements that have completely empty bodies (no comments),not
CppCoreGuidelines/scripts/python/cpplint.py,4178,and no else clauses.,not
CppCoreGuidelines/scripts/python/cpplint.py,4180,Find the position of the opening { for the if statement.,not
CppCoreGuidelines/scripts/python/cpplint.py,4181,Return without logging an error if it has no brackets.,not
CppCoreGuidelines/scripts/python/cpplint.py,4184,Loop until EOF or find anything that's not whitespace or opening {.,not
CppCoreGuidelines/scripts/python/cpplint.py,4187,Conditional has no brackets.,not
CppCoreGuidelines/scripts/python/cpplint.py,4191,Couldn't find conditional's opening { or any code before EOF.,not
CppCoreGuidelines/scripts/python/cpplint.py,4194,Set opening_line (opening_line_fragment may not be entire opening line).,not
CppCoreGuidelines/scripts/python/cpplint.py,4197,Find the position of the closing }.,not
CppCoreGuidelines/scripts/python/cpplint.py,4200,We need to make opening_pos relative to the start of the entire line.,not
CppCoreGuidelines/scripts/python/cpplint.py,4207,Now construct the body of the conditional. This consists of the portion,not
CppCoreGuidelines/scripts/python/cpplint.py,4208,"of the opening line after the {, all lines until the closing line,",not
CppCoreGuidelines/scripts/python/cpplint.py,4209,and the portion of the closing line before the }.,not
CppCoreGuidelines/scripts/python/cpplint.py,4212,"Opening line ends with a comment, so conditional isn't empty.",not
CppCoreGuidelines/scripts/python/cpplint.py,4215,Opening line after the {. Ignore comments here since we checked above.,not
CppCoreGuidelines/scripts/python/cpplint.py,4217,"All lines until closing line, excluding closing line, with comments.",not
CppCoreGuidelines/scripts/python/cpplint.py,4219,Closing line before the }. Won't (and can't) have comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,4223,If statement has brackets and fits on a single line.,not
CppCoreGuidelines/scripts/python/cpplint.py,4226,Check if the body is empty,not
CppCoreGuidelines/scripts/python/cpplint.py,4229,The body is empty. Now make sure there's not an else clause.,not
CppCoreGuidelines/scripts/python/cpplint.py,4232,Loop until EOF or find anything that's not whitespace or else clause.,not
CppCoreGuidelines/scripts/python/cpplint.py,4235,"Found an else clause, so don't log an error.",not
CppCoreGuidelines/scripts/python/cpplint.py,4242,The body is empty and there's no else clause until EOF or other code.,not
CppCoreGuidelines/scripts/python/cpplint.py,4259,Find opening parenthesis.  Do a regular expression match here,not
CppCoreGuidelines/scripts/python/cpplint.py,4260,"to make sure that we are matching the expected CHECK macro, as",not
CppCoreGuidelines/scripts/python/cpplint.py,4261,opposed to some other macro that happens to contain the CHECK,not
CppCoreGuidelines/scripts/python/cpplint.py,4262,substring.,not
CppCoreGuidelines/scripts/python/cpplint.py,4280,Decide the set of replacement macros that should be suggested,not
CppCoreGuidelines/scripts/python/cpplint.py,4286,Find end of the boolean expression by matching parentheses,not
CppCoreGuidelines/scripts/python/cpplint.py,4292,If the check macro is followed by something other than a,not
CppCoreGuidelines/scripts/python/cpplint.py,4293,"semicolon, assume users will log their own custom error messages",not
CppCoreGuidelines/scripts/python/cpplint.py,4294,and don't suggest any replacements.,not
CppCoreGuidelines/scripts/python/cpplint.py,4306,Parse expression so that we can take parentheses into account.,not
CppCoreGuidelines/scripts/python/cpplint.py,4307,"This avoids false positives for inputs like ""CHECK((a < 4) == b)"",",not
CppCoreGuidelines/scripts/python/cpplint.py,4308,which is not replaceable by CHECK_LE.,not
CppCoreGuidelines/scripts/python/cpplint.py,4318,Parenthesized operand,not
CppCoreGuidelines/scripts/python/cpplint.py,4322,Unmatched parenthesis,not
CppCoreGuidelines/scripts/python/cpplint.py,4326,Logical and/or operators.  This means the expression,not
CppCoreGuidelines/scripts/python/cpplint.py,4327,"contains more than one term, for example:",not
CppCoreGuidelines/scripts/python/cpplint.py,4328,CHECK(42 < a && a < b);,not
CppCoreGuidelines/scripts/python/cpplint.py,4329,,not
CppCoreGuidelines/scripts/python/cpplint.py,4330,"These are not replaceable with CHECK_LE, so bail out early.",not
CppCoreGuidelines/scripts/python/cpplint.py,4333,Non-relational operator,not
CppCoreGuidelines/scripts/python/cpplint.py,4337,Relational operator,not
CppCoreGuidelines/scripts/python/cpplint.py,4342,Unparenthesized operand.  Instead of appending to lhs one character,not
CppCoreGuidelines/scripts/python/cpplint.py,4343,"at a time, we do another regular expression match to consume several",not
CppCoreGuidelines/scripts/python/cpplint.py,4344,characters at once if possible.  Trivial benchmark shows that this,not
CppCoreGuidelines/scripts/python/cpplint.py,4345,is more efficient when the operands are longer than a single,not
CppCoreGuidelines/scripts/python/cpplint.py,4346,"character, which is generally the case.",not
CppCoreGuidelines/scripts/python/cpplint.py,4355,Only apply checks if we got all parts of the boolean expression,not
CppCoreGuidelines/scripts/python/cpplint.py,4359,Check that rhs do not contain logical operators.  We already know,not
CppCoreGuidelines/scripts/python/cpplint.py,4360,that lhs is fine since the loop above parses out && and ||.,not
CppCoreGuidelines/scripts/python/cpplint.py,4364,At least one of the operands must be a constant literal.  This is,not
CppCoreGuidelines/scripts/python/cpplint.py,4365,to avoid suggesting replacements for unprintable things like,not
CppCoreGuidelines/scripts/python/cpplint.py,4366,CHECK(variable != iterator),not
CppCoreGuidelines/scripts/python/cpplint.py,4367,,not
CppCoreGuidelines/scripts/python/cpplint.py,4368,"The following pattern matches decimal, hex integers, strings, and",not
CppCoreGuidelines/scripts/python/cpplint.py,4369,characters (in that order).,not
CppCoreGuidelines/scripts/python/cpplint.py,4374,"Note: since we know both lhs and rhs, we can provide a more",not
CppCoreGuidelines/scripts/python/cpplint.py,4375,descriptive error message like:,not
CppCoreGuidelines/scripts/python/cpplint.py,4376,"Consider using CHECK_EQ(x, 42) instead of CHECK(x == 42)",not
CppCoreGuidelines/scripts/python/cpplint.py,4377,Instead of:,not
CppCoreGuidelines/scripts/python/cpplint.py,4378,Consider using CHECK_EQ instead of CHECK(a == b),not
CppCoreGuidelines/scripts/python/cpplint.py,4379,,not
CppCoreGuidelines/scripts/python/cpplint.py,4380,We are still keeping the less descriptive message because if lhs,not
CppCoreGuidelines/scripts/python/cpplint.py,4381,"or rhs gets long, the error message might become unreadable.",not
CppCoreGuidelines/scripts/python/cpplint.py,4399,Avoid preprocessor lines,not
CppCoreGuidelines/scripts/python/cpplint.py,4403,Last ditch effort to avoid multi-line comments.  This will not help,not
CppCoreGuidelines/scripts/python/cpplint.py,4404,if the comment started before the current line or ended after the,not
CppCoreGuidelines/scripts/python/cpplint.py,4405,"current line, but it catches most of the false positives.  At least,",not
CppCoreGuidelines/scripts/python/cpplint.py,4406,it provides a way to workaround this warning for people who use,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4407,multi-line comments in preprocessor macros.,not
CppCoreGuidelines/scripts/python/cpplint.py,4408,,not
CppCoreGuidelines/scripts/python/cpplint.py,4409,TODO(unknown): remove this once cpplint has better support for,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4410,multi-line comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,4460,"Don't use ""elided"" lines here, otherwise we can't check commented lines.",not
CppCoreGuidelines/scripts/python/cpplint.py,4461,"Don't want to use ""raw"" either, because we don't want to check inside C++11",not
CppCoreGuidelines/scripts/python/cpplint.py,4462,"raw strings,",not
CppCoreGuidelines/scripts/python/cpplint.py,4471,One or three blank spaces at the beginning of the line is weird; it's,not
CppCoreGuidelines/scripts/python/cpplint.py,4472,hard to reconcile that with 2-space indents.,not
CppCoreGuidelines/scripts/python/cpplint.py,4473,NOTE: here are the conditions rob pike used for his tests.  Mine aren't,not
CppCoreGuidelines/scripts/python/cpplint.py,4474,"as sophisticated, but it may be worth becoming so:  RLENGTH==initial_spaces",not
CppCoreGuidelines/scripts/python/cpplint.py,4475,if(RLENGTH > 20) complain = 0;,not
CppCoreGuidelines/scripts/python/cpplint.py,4476,"if(match($0, "" +(error|private|public|protected):"")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4477,"if(match(prev, ""&& *$"")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4478,"if(match(prev, ""\\|\\| *$"")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4479,"if(match(prev, ""[\"",=><] *$"")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4480,"if(match($0, "" <<"")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4481,"if(match(prev, "" +for \\("")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4482,"if(prevodd && match(prevprev, "" +for \\("")) complain = 0;",not
CppCoreGuidelines/scripts/python/cpplint.py,4489,"There are certain situations we allow one space, notably for",not
CppCoreGuidelines/scripts/python/cpplint.py,4490,"section labels, and also lines containing multi-line raw strings.",not
CppCoreGuidelines/scripts/python/cpplint.py,4491,We also don't check for lines that look like continuation lines,not
CppCoreGuidelines/scripts/python/cpplint.py,4492,"(of lines ending in double quotes, commas, equals, or angle brackets)",not
CppCoreGuidelines/scripts/python/cpplint.py,4493,because the rules for how to indent those are non-trivial.,not
CppCoreGuidelines/scripts/python/cpplint.py,4507,Check if the line is a header guard.,not
CppCoreGuidelines/scripts/python/cpplint.py,4515,"#include lines and header guards can be long, since there's no clean way to",not
CppCoreGuidelines/scripts/python/cpplint.py,4516,split them.,not
CppCoreGuidelines/scripts/python/cpplint.py,4517,,not
CppCoreGuidelines/scripts/python/cpplint.py,4518,"URLs can be long too.  It's possible to split these, but it makes them",not
CppCoreGuidelines/scripts/python/cpplint.py,4519,harder to cut&paste.,not
CppCoreGuidelines/scripts/python/cpplint.py,4520,,not
CppCoreGuidelines/scripts/python/cpplint.py,4521,"The ""$Id:...$"" comment may also get very long without it being the",not
CppCoreGuidelines/scripts/python/cpplint.py,4522,developers fault.,not
CppCoreGuidelines/scripts/python/cpplint.py,4523,,not
CppCoreGuidelines/scripts/python/cpplint.py,4524,Doxygen documentation copying can get pretty long when using an overloaded,not
CppCoreGuidelines/scripts/python/cpplint.py,4525,function declaration,not
CppCoreGuidelines/scripts/python/cpplint.py,4537,allow simple single line lambdas,not
CppCoreGuidelines/scripts/python/cpplint.py,4540,for loops are allowed two ;'s (and may run over two lines).,not
CppCoreGuidelines/scripts/python/cpplint.py,4544,It's ok to have many commands in a switch case that fits in 1 line,not
CppCoreGuidelines/scripts/python/cpplint.py,4551,Some more style checks,not
CppCoreGuidelines/scripts/python/cpplint.py,4570,Matches the first component of a filename delimited by -s and _s. That is:,not
CppCoreGuidelines/scripts/python/cpplint.py,4571,_RE_FIRST_COMPONENT.match('foo').group(0) == 'foo',not
CppCoreGuidelines/scripts/python/cpplint.py,4572,_RE_FIRST_COMPONENT.match('foo.cc').group(0) == 'foo',not
CppCoreGuidelines/scripts/python/cpplint.py,4573,_RE_FIRST_COMPONENT.match('foo-bar_baz.cc').group(0) == 'foo',not
CppCoreGuidelines/scripts/python/cpplint.py,4574,_RE_FIRST_COMPONENT.match('foo_bar-baz.cc').group(0) == 'foo',not
CppCoreGuidelines/scripts/python/cpplint.py,4632,"This is a list of all standard c++ header files, except",not
CppCoreGuidelines/scripts/python/cpplint.py,4633,those already checked for above.,not
CppCoreGuidelines/scripts/python/cpplint.py,4636,Headers with C++ extensions shouldn't be considered C system headers,not
CppCoreGuidelines/scripts/python/cpplint.py,4646,If the target file and the include we're checking share a,not
CppCoreGuidelines/scripts/python/cpplint.py,4647,"basename when we drop common extensions, and the include",not
CppCoreGuidelines/scripts/python/cpplint.py,4648,"lives in . , then it's likely to be owned by the target file.",not
CppCoreGuidelines/scripts/python/cpplint.py,4659,If the target and include share some initial basename,not
CppCoreGuidelines/scripts/python/cpplint.py,4660,"component, it's possible the target is implementing the",not
CppCoreGuidelines/scripts/python/cpplint.py,4661,"include, so it's allowed to be first, but we'll never",not
CppCoreGuidelines/scripts/python/cpplint.py,4662,complain if it's not there.,not
CppCoreGuidelines/scripts/python/cpplint.py,4691,"""include"" should use the new style ""foo/bar.h"" instead of just ""bar.h""",not
CppCoreGuidelines/scripts/python/cpplint.py,4692,Only do this check if the included header follows google naming,not
CppCoreGuidelines/scripts/python/cpplint.py,4693,"conventions.  If not, assume that it's a 3rd party API that",not
CppCoreGuidelines/scripts/python/cpplint.py,4694,requires special include conventions.,not
CppCoreGuidelines/scripts/python/cpplint.py,4695,,not
CppCoreGuidelines/scripts/python/cpplint.py,4696,"We also make an exception for Lua headers, which follow google",not
CppCoreGuidelines/scripts/python/cpplint.py,4697,naming convention but not the include convention.,not
CppCoreGuidelines/scripts/python/cpplint.py,4703,"we shouldn't include a file more than once. actually, there are a",not
CppCoreGuidelines/scripts/python/cpplint.py,4704,"handful of instances where doing so is okay, but in general it's",not
CppCoreGuidelines/scripts/python/cpplint.py,4705,not.,not
CppCoreGuidelines/scripts/python/cpplint.py,4727,We want to ensure that headers appear in the right order:,not
CppCoreGuidelines/scripts/python/cpplint.py,4728,"1) for foo.cc, foo.h  (preferred location)",not
CppCoreGuidelines/scripts/python/cpplint.py,4729,2) c system files,not
CppCoreGuidelines/scripts/python/cpplint.py,4730,3) cpp system files,not
CppCoreGuidelines/scripts/python/cpplint.py,4731,"4) for foo.cc, foo.h  (deprecated location)",not
CppCoreGuidelines/scripts/python/cpplint.py,4732,5) other google headers,not
CppCoreGuidelines/scripts/python/cpplint.py,4733,,not
CppCoreGuidelines/scripts/python/cpplint.py,4734,We classify each include statement as one of those 5 types,not
CppCoreGuidelines/scripts/python/cpplint.py,4735,using a number of techniques. The include_state object keeps,not
CppCoreGuidelines/scripts/python/cpplint.py,4736,"track of the highest type seen, and complains if we see a",not
CppCoreGuidelines/scripts/python/cpplint.py,4737,lower type after that.,not
CppCoreGuidelines/scripts/python/cpplint.py,4773,TODO(unknown): Audit cpplint.py to see what places could be profitably,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4774,rewritten to use _GetTextInside (and use inferior regexp matching today).,not
CppCoreGuidelines/scripts/python/cpplint.py,4776,Give opening punctuations to get the matching close-punctuations.,not
CppCoreGuidelines/scripts/python/cpplint.py,4780,Find the position to start extracting text.,not
CppCoreGuidelines/scripts/python/cpplint.py,4782,start_pattern not found in text.,not
CppCoreGuidelines/scripts/python/cpplint.py,4790,Stack of closing punctuations we expect to have in text after position.,not
CppCoreGuidelines/scripts/python/cpplint.py,4797,A closing punctuation without matching opening punctuations.,not
CppCoreGuidelines/scripts/python/cpplint.py,4803,Opening punctuations left without matching close-punctuations.,not
CppCoreGuidelines/scripts/python/cpplint.py,4805,punctuations match.,not
CppCoreGuidelines/scripts/python/cpplint.py,4809,Patterns for matching call-by-reference parameters.,not
CppCoreGuidelines/scripts/python/cpplint.py,4810,,not
CppCoreGuidelines/scripts/python/cpplint.py,4811,Supports nested templates up to 2 levels deep using this messy pattern:,not
CppCoreGuidelines/scripts/python/cpplint.py,4812,< (?: < (?: < [^<>]*,not
CppCoreGuidelines/scripts/python/cpplint.py,4813,>,not
CppCoreGuidelines/scripts/python/cpplint.py,4814,|   [^<>] )*,not
CppCoreGuidelines/scripts/python/cpplint.py,4815,>,not
CppCoreGuidelines/scripts/python/cpplint.py,4816,|   [^<>] )*,not
CppCoreGuidelines/scripts/python/cpplint.py,4817,>,not
CppCoreGuidelines/scripts/python/cpplint.py,4818,=~ [[:alpha:]][[:alnum:]]*,not
CppCoreGuidelines/scripts/python/cpplint.py,4824,A call-by-reference parameter ends with '& identifier'.,not
CppCoreGuidelines/scripts/python/cpplint.py,4828,A call-by-const-reference parameter either ends with 'const& identifier',not
CppCoreGuidelines/scripts/python/cpplint.py,4829,or looks like 'const type& identifier' when 'type' is atomic.,not
CppCoreGuidelines/scripts/python/cpplint.py,4833,Stream types.,not
CppCoreGuidelines/scripts/python/cpplint.py,4855,"If the line is empty or consists of entirely a comment, no need to",not
CppCoreGuidelines/scripts/python/cpplint.py,4856,check it.,not
CppCoreGuidelines/scripts/python/cpplint.py,4866,Reset include state across preprocessor directives.  This is meant,not
CppCoreGuidelines/scripts/python/cpplint.py,4867,to silence warnings for conditional includes.,not
CppCoreGuidelines/scripts/python/cpplint.py,4873,Perform other checks now that we are sure that this is not an include line,not
CppCoreGuidelines/scripts/python/cpplint.py,4879,TODO(unknown): check that 1-arg constructors are explicit.,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4880,How to tell it's a constructor?,not
CppCoreGuidelines/scripts/python/cpplint.py,4881,(handled in CheckForNonStandardConstructs for now),not
CppCoreGuidelines/scripts/python/cpplint.py,4882,TODO(unknown): check that classes declare or disable copy/assign,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4883,(level 1 error),not
CppCoreGuidelines/scripts/python/cpplint.py,4886,Check if people are using the verboten C basic types.  The only exception,not
CppCoreGuidelines/scripts/python/cpplint.py,4887,"we regularly allow is ""unsigned short port"" for port.",not
CppCoreGuidelines/scripts/python/cpplint.py,4898,Check if some verboten operator overloading is going on,not
CppCoreGuidelines/scripts/python/cpplint.py,4899,TODO(unknown): catch out-of-line unary operator&:,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4900,class X {};,not
CppCoreGuidelines/scripts/python/cpplint.py,4901,int operator&(const X& x) { return 42; }  // unary operator&,not
CppCoreGuidelines/scripts/python/cpplint.py,4902,The trick is it's hard to tell apart from binary operator&:,not
CppCoreGuidelines/scripts/python/cpplint.py,4903,class Y { int operator&(const Y& x) { return 23; } }; // binary operator&,not
CppCoreGuidelines/scripts/python/cpplint.py,4908,"Check for suspicious usage of ""if"" like",not
CppCoreGuidelines/scripts/python/cpplint.py,4909,} if (a == b) {,not
CppCoreGuidelines/scripts/python/cpplint.py,4914,Check for potential format string bugs like printf(foo).,not
CppCoreGuidelines/scripts/python/cpplint.py,4915,We constrain the pattern not to pick things like DocidForPrintf(foo).,not
CppCoreGuidelines/scripts/python/cpplint.py,4916,Not perfect but it can catch printf(foo.c_str()) and printf(foo->c_str()),not
CppCoreGuidelines/scripts/python/cpplint.py,4917,TODO(unknown): Catch the following case. Need to change the calling,SATD
CppCoreGuidelines/scripts/python/cpplint.py,4918,convention of the whole function to process multiple line to handle it.,not
CppCoreGuidelines/scripts/python/cpplint.py,4919,printf(,not
CppCoreGuidelines/scripts/python/cpplint.py,4920,boy_this_is_a_really_long_variable_that_cannot_fit_on_the_prev_line);,not
CppCoreGuidelines/scripts/python/cpplint.py,4931,"Check for potential memset bugs like memset(buf, sizeof(buf), 0).",not
CppCoreGuidelines/scripts/python/cpplint.py,4948,Detect variable-length arrays.,not
CppCoreGuidelines/scripts/python/cpplint.py,4952,Split the size using space and arithmetic operators as delimiters.,not
CppCoreGuidelines/scripts/python/cpplint.py,4953,If any of the resulting tokens are not compile time constants then,not
CppCoreGuidelines/scripts/python/cpplint.py,4954,report the error.,not
CppCoreGuidelines/scripts/python/cpplint.py,4974,"A catch all for tricky sizeof cases, including 'sizeof expression',",not
CppCoreGuidelines/scripts/python/cpplint.py,4975,"'sizeof(*type)', 'sizeof(const type)', 'sizeof(struct StructName)'",not
CppCoreGuidelines/scripts/python/cpplint.py,4976,requires skipping the next token because we split on ' ' and '*'.,not
CppCoreGuidelines/scripts/python/cpplint.py,4987,Check for use of unnamed namespaces in header files.  Registration,not
CppCoreGuidelines/scripts/python/cpplint.py,4988,"macros are typically OK, so we allow use of ""namespace {"" on lines",not
CppCoreGuidelines/scripts/python/cpplint.py,4989,that end with backslashes.,not
CppCoreGuidelines/scripts/python/cpplint.py,5010,Match two lines at a time to support multiline declarations,not
CppCoreGuidelines/scripts/python/cpplint.py,5014,Check for people declaring static/global STL strings at the top level.,not
CppCoreGuidelines/scripts/python/cpplint.py,5015,This is dangerous because the C++ language does not guarantee that,not
CppCoreGuidelines/scripts/python/cpplint.py,5016,"globals with constructors are initialized before the first access, and",not
CppCoreGuidelines/scripts/python/cpplint.py,5017,also because globals can be destroyed when some threads are still running.,not
CppCoreGuidelines/scripts/python/cpplint.py,5018,TODO(unknown): Generalize this to also find static unique_ptr instances.,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5019,TODO(unknown): File bugs for clang-tidy to find these.,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5025,Remove false positives:,not
CppCoreGuidelines/scripts/python/cpplint.py,5026,- String pointers (as opposed to values).,not
CppCoreGuidelines/scripts/python/cpplint.py,5027,string *pointer,not
CppCoreGuidelines/scripts/python/cpplint.py,5028,const string *pointer,not
CppCoreGuidelines/scripts/python/cpplint.py,5029,string const *pointer,not
CppCoreGuidelines/scripts/python/cpplint.py,5030,string *const pointer,not
CppCoreGuidelines/scripts/python/cpplint.py,5031,,not
CppCoreGuidelines/scripts/python/cpplint.py,5032,- Functions and template specializations.,not
CppCoreGuidelines/scripts/python/cpplint.py,5033,string Function<Type>(...,not
CppCoreGuidelines/scripts/python/cpplint.py,5034,string Class<Type>::Method(...,not
CppCoreGuidelines/scripts/python/cpplint.py,5035,,not
CppCoreGuidelines/scripts/python/cpplint.py,5036,- Operators.  These are matched separately because operator names,not
CppCoreGuidelines/scripts/python/cpplint.py,5037,"cross non-word boundaries, and trying to match both operators",not
CppCoreGuidelines/scripts/python/cpplint.py,5038,and functions at the same time would decrease accuracy of,not
CppCoreGuidelines/scripts/python/cpplint.py,5039,matching identifiers.,not
CppCoreGuidelines/scripts/python/cpplint.py,5040,string Class::operator*(),not
CppCoreGuidelines/scripts/python/cpplint.py,5071,"When snprintf is used, the second argument shouldn't be a literal.",not
CppCoreGuidelines/scripts/python/cpplint.py,5074,"If 2nd arg is zero, snprintf is used to calculate size.",not
CppCoreGuidelines/scripts/python/cpplint.py,5079,Check if some verboten C functions are being used.,not
CppCoreGuidelines/scripts/python/cpplint.py,5099,Scan back a few lines for start of current function,not
CppCoreGuidelines/scripts/python/cpplint.py,5103,"Look for ""override"" after the matching closing parenthesis",not
CppCoreGuidelines/scripts/python/cpplint.py,5120,Scan back a few lines for start of current function,not
CppCoreGuidelines/scripts/python/cpplint.py,5145,A lone colon tend to indicate the start of a constructor,not
CppCoreGuidelines/scripts/python/cpplint.py,5146,"initializer list.  It could also be a ternary operator, which",not
CppCoreGuidelines/scripts/python/cpplint.py,5147,also tend to appear in constructor initializer lists as,not
CppCoreGuidelines/scripts/python/cpplint.py,5148,opposed to parameter lists.,not
CppCoreGuidelines/scripts/python/cpplint.py,5151,A closing brace followed by a comma is probably the end of a,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5152,brace-initialized member in constructor initializer list.,not
CppCoreGuidelines/scripts/python/cpplint.py,5155,Found one of the following:,not
CppCoreGuidelines/scripts/python/cpplint.py,5156,"- A closing brace or semicolon, probably the end of the previous",not
CppCoreGuidelines/scripts/python/cpplint.py,5157,function.,not
CppCoreGuidelines/scripts/python/cpplint.py,5158,"- An opening brace, probably the start of current class or namespace.",not
CppCoreGuidelines/scripts/python/cpplint.py,5159,,not
CppCoreGuidelines/scripts/python/cpplint.py,5160,Current line is probably not inside an initializer list since,not
CppCoreGuidelines/scripts/python/cpplint.py,5161,we saw one of those things without seeing the starting colon.,not
CppCoreGuidelines/scripts/python/cpplint.py,5164,Got to the beginning of the file without seeing the start of,not
CppCoreGuidelines/scripts/python/cpplint.py,5165,constructor initializer list.,not
CppCoreGuidelines/scripts/python/cpplint.py,5184,Do nothing if there is no '&' on current line.,not
CppCoreGuidelines/scripts/python/cpplint.py,5189,"If a function is inherited, current function doesn't have much of",not
CppCoreGuidelines/scripts/python/cpplint.py,5190,"a choice, so any non-const references should not be blamed on",not
CppCoreGuidelines/scripts/python/cpplint.py,5191,derived function.,not
CppCoreGuidelines/scripts/python/cpplint.py,5195,"Don't warn on out-of-line method definitions, as we would warn on the",not
CppCoreGuidelines/scripts/python/cpplint.py,5196,"in-line declaration, if it isn't marked with 'override'.",not
CppCoreGuidelines/scripts/python/cpplint.py,5200,"Long type names may be broken across multiple lines, usually in one",not
CppCoreGuidelines/scripts/python/cpplint.py,5201,of these forms:,not
CppCoreGuidelines/scripts/python/cpplint.py,5202,LongType,not
CppCoreGuidelines/scripts/python/cpplint.py,5203,::LongTypeContinued &identifier,not
CppCoreGuidelines/scripts/python/cpplint.py,5204,LongType::,not
CppCoreGuidelines/scripts/python/cpplint.py,5205,LongTypeContinued &identifier,not
CppCoreGuidelines/scripts/python/cpplint.py,5206,LongType<,not
CppCoreGuidelines/scripts/python/cpplint.py,5207,...>::LongTypeContinued &identifier,not
CppCoreGuidelines/scripts/python/cpplint.py,5208,,not
CppCoreGuidelines/scripts/python/cpplint.py,5209,"If we detected a type split across two lines, join the previous",not
CppCoreGuidelines/scripts/python/cpplint.py,5210,line to current line so that we can match const references,not
CppCoreGuidelines/scripts/python/cpplint.py,5211,accordingly.,not
CppCoreGuidelines/scripts/python/cpplint.py,5212,,not
CppCoreGuidelines/scripts/python/cpplint.py,5213,"Note that this only scans back one line, since scanning back",not
CppCoreGuidelines/scripts/python/cpplint.py,5214,arbitrary number of lines would be expensive.  If you have a type,not
CppCoreGuidelines/scripts/python/cpplint.py,5215,"that spans more than 2 lines, please use a typedef.",not
CppCoreGuidelines/scripts/python/cpplint.py,5219,previous_line\n + ::current_line,not
CppCoreGuidelines/scripts/python/cpplint.py,5223,previous_line::\n + current_line,not
CppCoreGuidelines/scripts/python/cpplint.py,5229,Check for templated parameter that is split across multiple lines,not
CppCoreGuidelines/scripts/python/cpplint.py,5235,"Found the matching < on an earlier line, collect all",not
CppCoreGuidelines/scripts/python/cpplint.py,5236,pieces up to current line.,not
CppCoreGuidelines/scripts/python/cpplint.py,5241,Check for non-const references in function parameters.  A single '&' may,not
CppCoreGuidelines/scripts/python/cpplint.py,5242,found in the following places:,not
CppCoreGuidelines/scripts/python/cpplint.py,5243,inside expression: binary & for bitwise AND,not
CppCoreGuidelines/scripts/python/cpplint.py,5244,inside expression: unary & for taking the address of something,not
CppCoreGuidelines/scripts/python/cpplint.py,5245,inside declarators: reference parameter,not
CppCoreGuidelines/scripts/python/cpplint.py,5246,We will exclude the first two cases by checking that we are not inside a,not
CppCoreGuidelines/scripts/python/cpplint.py,5247,"function body, including one that was just introduced by a trailing '{'.",not
CppCoreGuidelines/scripts/python/cpplint.py,5248,TODO(unknown): Doesn't account for 'catch(Exception& e)' [rare].,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5252,"Not at toplevel, not within a class, and not within a namespace",not
CppCoreGuidelines/scripts/python/cpplint.py,5255,Avoid initializer lists.  We only need to scan back from the,not
CppCoreGuidelines/scripts/python/cpplint.py,5256,current line for something that starts with ':'.,not
CppCoreGuidelines/scripts/python/cpplint.py,5257,,not
CppCoreGuidelines/scripts/python/cpplint.py,5258,"We don't need to check the current line, since the '&' would",not
CppCoreGuidelines/scripts/python/cpplint.py,5259,appear inside the second set of parentheses on the current line as,not
CppCoreGuidelines/scripts/python/cpplint.py,5260,opposed to the first set.,not
CppCoreGuidelines/scripts/python/cpplint.py,5269,Avoid preprocessors,not
CppCoreGuidelines/scripts/python/cpplint.py,5273,Avoid constructor initializer lists,not
CppCoreGuidelines/scripts/python/cpplint.py,5277,"We allow non-const references in a few standard places, like functions",not
CppCoreGuidelines/scripts/python/cpplint.py,5278,"called ""swap()"" or iostream operators like ""<<"" or "">>"".  Do not check",not
CppCoreGuidelines/scripts/python/cpplint.py,5279,those function parameters.,not
CppCoreGuidelines/scripts/python/cpplint.py,5280,,not
CppCoreGuidelines/scripts/python/cpplint.py,5281,"We also accept & in static_assert, which looks like a function but",not
CppCoreGuidelines/scripts/python/cpplint.py,5282,it's actually a declaration expression.,not
CppCoreGuidelines/scripts/python/cpplint.py,5290,Don't see a whitelisted function on this line.  Actually we,not
CppCoreGuidelines/scripts/python/cpplint.py,5291,"didn't see any function name on this line, so this is likely a",not
CppCoreGuidelines/scripts/python/cpplint.py,5292,multi-line parameter list.  Try a bit harder to catch this case.,not
CppCoreGuidelines/scripts/python/cpplint.py,5298,exclude function body,not
CppCoreGuidelines/scripts/python/cpplint.py,5319,Check to see if they're using an conversion function cast.,not
CppCoreGuidelines/scripts/python/cpplint.py,5320,"I just try to capture the most common basic types, though there are more.",not
CppCoreGuidelines/scripts/python/cpplint.py,5321,"Parameterless conversion functions, such as bool(), are allowed as they are",not
CppCoreGuidelines/scripts/python/cpplint.py,5322,probably a member operator declaration or default constructor.,not
CppCoreGuidelines/scripts/python/cpplint.py,5331,matched_new_or_template is used to silence two false positives:,not
CppCoreGuidelines/scripts/python/cpplint.py,5332,- New operators,not
CppCoreGuidelines/scripts/python/cpplint.py,5333,- Template arguments with function types,not
CppCoreGuidelines/scripts/python/cpplint.py,5334,,not
CppCoreGuidelines/scripts/python/cpplint.py,5335,"For template arguments, we match on types immediately following",not
CppCoreGuidelines/scripts/python/cpplint.py,5336,an opening bracket without any spaces.  This is a fast way to,not
CppCoreGuidelines/scripts/python/cpplint.py,5337,silence the common case where the function type is the first,not
CppCoreGuidelines/scripts/python/cpplint.py,5338,template argument.  False negative with less-than comparison is,not
CppCoreGuidelines/scripts/python/cpplint.py,5339,avoided because those operators are usually followed by a space.,not
CppCoreGuidelines/scripts/python/cpplint.py,5340,,not
CppCoreGuidelines/scripts/python/cpplint.py,5341,function<double(double)>   // bracket + no space = false positive,not
CppCoreGuidelines/scripts/python/cpplint.py,5342,value < double(42)         // bracket + space = true positive,not
CppCoreGuidelines/scripts/python/cpplint.py,5345,Avoid arrays by looking for brackets that come after the closing,not
CppCoreGuidelines/scripts/python/cpplint.py,5346,parenthesis.,not
CppCoreGuidelines/scripts/python/cpplint.py,5350,Other things to ignore:,not
CppCoreGuidelines/scripts/python/cpplint.py,5351,- Function pointers,not
CppCoreGuidelines/scripts/python/cpplint.py,5352,- Casts to pointer types,not
CppCoreGuidelines/scripts/python/cpplint.py,5353,- Placement new,not
CppCoreGuidelines/scripts/python/cpplint.py,5354,- Alias declarations,not
CppCoreGuidelines/scripts/python/cpplint.py,5372,"This doesn't catch all cases. Consider (const char * const)""hello"".",not
CppCoreGuidelines/scripts/python/cpplint.py,5373,,not
CppCoreGuidelines/scripts/python/cpplint.py,5374,"(char *) ""foo"" should always be a const_cast (reinterpret_cast won't",not
CppCoreGuidelines/scripts/python/cpplint.py,5375,compile).,not
CppCoreGuidelines/scripts/python/cpplint.py,5380,Check pointer casts for other than string constants,not
CppCoreGuidelines/scripts/python/cpplint.py,5384,"In addition, we look for people taking the address of a cast.  This",not
CppCoreGuidelines/scripts/python/cpplint.py,5385,"is dangerous -- casts can assign to temporaries, so the pointer doesn't",not
CppCoreGuidelines/scripts/python/cpplint.py,5386,point where you think.,not
CppCoreGuidelines/scripts/python/cpplint.py,5387,,not
CppCoreGuidelines/scripts/python/cpplint.py,5388,Some non-identifier character is required before the '&' for the,not
CppCoreGuidelines/scripts/python/cpplint.py,5389,expression to be recognized as a cast.  These are casts:,not
CppCoreGuidelines/scripts/python/cpplint.py,5390,expression = &static_cast<int*>(temporary());,not
CppCoreGuidelines/scripts/python/cpplint.py,5391,function(&(int*)(temporary()));,not
CppCoreGuidelines/scripts/python/cpplint.py,5392,,not
CppCoreGuidelines/scripts/python/cpplint.py,5393,This is not a cast:,not
CppCoreGuidelines/scripts/python/cpplint.py,5394,reference_type&(int* function_param);,not
CppCoreGuidelines/scripts/python/cpplint.py,5399,Try a better error message when the & is bound to something,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5400,"dereferenced by the casted pointer, as opposed to the casted",not
CppCoreGuidelines/scripts/python/cpplint.py,5401,pointer itself.,not
CppCoreGuidelines/scripts/python/cpplint.py,5448,Exclude lines with keywords that tend to look like casts,not
CppCoreGuidelines/scripts/python/cpplint.py,5453,Try expanding current context to see if we one level of,not
CppCoreGuidelines/scripts/python/cpplint.py,5454,parentheses inside a macro.,not
CppCoreGuidelines/scripts/python/cpplint.py,5461,operator++(int) and operator--(int),not
CppCoreGuidelines/scripts/python/cpplint.py,5465,A single unnamed argument for a function tends to look like old style cast.,not
CppCoreGuidelines/scripts/python/cpplint.py,5466,"If we see those, don't issue warnings for deprecated casts.",not
CppCoreGuidelines/scripts/python/cpplint.py,5472,"At this point, all that should be left is actual casts.",not
CppCoreGuidelines/scripts/python/cpplint.py,5536,gcc extensions.,not
CppCoreGuidelines/scripts/python/cpplint.py,5537,"Note: std::hash is their hash, ::hash is our hash",not
CppCoreGuidelines/scripts/python/cpplint.py,5555,"Match max<type>(..., ...), max(..., ...), but not foo->max, foo.max or",not
CppCoreGuidelines/scripts/python/cpplint.py,5556,type::max().,not
CppCoreGuidelines/scripts/python/cpplint.py,5562,Other scripts may reach in and modify this pattern.,not
CppCoreGuidelines/scripts/python/cpplint.py,5675,A map of header name to linenumber and the template entity.,not
CppCoreGuidelines/scripts/python/cpplint.py,5676,"Example of required: { '<functional>': (1219, 'less<>') }",not
CppCoreGuidelines/scripts/python/cpplint.py,5683,String is special -- it is a non-templatized type in STL.,not
CppCoreGuidelines/scripts/python/cpplint.py,5686,Don't warn about strings in non-STL namespaces:,not
CppCoreGuidelines/scripts/python/cpplint.py,5687,(We check only the first match per line; good enough.),not
CppCoreGuidelines/scripts/python/cpplint.py,5696,"The following function is just a speed up, no semantics are changed.",not
CppCoreGuidelines/scripts/python/cpplint.py,5697,Reduces the cpu time usage by skipping lines.,not
CppCoreGuidelines/scripts/python/cpplint.py,5703,Don't warn about IWYU in non-STL namespaces:,not
CppCoreGuidelines/scripts/python/cpplint.py,5704,(We check only the first match per line; good enough.),not
CppCoreGuidelines/scripts/python/cpplint.py,5709,The policy is that if you #include something in foo.h you don't need to,not
CppCoreGuidelines/scripts/python/cpplint.py,5710,"include it again in foo.cc. Here, we will look at possible includes.",not
CppCoreGuidelines/scripts/python/cpplint.py,5711,Let's flatten the include_state include_list and copy it into a dictionary.,not
CppCoreGuidelines/scripts/python/cpplint.py,5715,Did we find the header for this file (if any) and successfully load it?,not
CppCoreGuidelines/scripts/python/cpplint.py,5718,Use the absolute path so that matching works properly.,not
CppCoreGuidelines/scripts/python/cpplint.py,5721,For Emacs's flymake.,not
CppCoreGuidelines/scripts/python/cpplint.py,5722,"If cpplint is invoked from Emacs's flymake, a temporary file is generated",not
CppCoreGuidelines/scripts/python/cpplint.py,5723,"by flymake and that file name might end with '_flymake.cc'. In that case,",not
CppCoreGuidelines/scripts/python/cpplint.py,5724,restore original file name here so that the corresponding header file can be,not
CppCoreGuidelines/scripts/python/cpplint.py,5725,found.,not
CppCoreGuidelines/scripts/python/cpplint.py,5726,"e.g. If the file name is 'foo_flymake.cc', we should search for 'foo.h'",not
CppCoreGuidelines/scripts/python/cpplint.py,5727,instead of 'foo_flymake.h',not
CppCoreGuidelines/scripts/python/cpplint.py,5730,"include_dict is modified during iteration, so we iterate over a copy of",not
CppCoreGuidelines/scripts/python/cpplint.py,5731,the keys.,not
CppCoreGuidelines/scripts/python/cpplint.py,5739,"If we can't find the header file for a .cc, assume it's because we don't",not
CppCoreGuidelines/scripts/python/cpplint.py,5740,know where to look. In that case we'll give up as we're not sure they,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5741,didn't include it in the .h file.,not
CppCoreGuidelines/scripts/python/cpplint.py,5742,TODO(unknown): Do a better job of finding .h files so we are confident that,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5743,not having the .h file means there isn't one.,not
CppCoreGuidelines/scripts/python/cpplint.py,5749,"All the lines have been processed, report the errors found.",not
CppCoreGuidelines/scripts/python/cpplint.py,5777,4 = high confidence,not
CppCoreGuidelines/scripts/python/cpplint.py,5791,"Look for ""virtual"" on current line.",not
CppCoreGuidelines/scripts/python/cpplint.py,5796,"Ignore ""virtual"" keywords that are near access-specifiers.  These",not
CppCoreGuidelines/scripts/python/cpplint.py,5797,are only used in class base-specifier and do not apply to member,not
CppCoreGuidelines/scripts/python/cpplint.py,5798,functions.,not
CppCoreGuidelines/scripts/python/cpplint.py,5803,"Ignore the ""virtual"" keyword from virtual base classes.  Usually",not
CppCoreGuidelines/scripts/python/cpplint.py,5804,there is a column on the same line in these cases (virtual base,not
CppCoreGuidelines/scripts/python/cpplint.py,5805,classes are rare in google3 because multiple inheritance is rare).,not
CppCoreGuidelines/scripts/python/cpplint.py,5808,Look for the next opening parenthesis.  This is the start of the,not
CppCoreGuidelines/scripts/python/cpplint.py,5809,parameter list (possibly on the next line shortly after virtual).,not
CppCoreGuidelines/scripts/python/cpplint.py,5810,TODO(unknown): doesn't work if there are virtual functions with,SATD
CppCoreGuidelines/scripts/python/cpplint.py,5811,"decltype() or other things that use parentheses, but csearch suggests",not
CppCoreGuidelines/scripts/python/cpplint.py,5812,that this is rare.,not
CppCoreGuidelines/scripts/python/cpplint.py,5820,Match parentheses to find the end of the parameter list,not
CppCoreGuidelines/scripts/python/cpplint.py,5827,"Couldn't find end of parameter list, give up",SATD
CppCoreGuidelines/scripts/python/cpplint.py,5829,"Look for ""override"" or ""final"" after the parameter list",not
CppCoreGuidelines/scripts/python/cpplint.py,5830,(possibly on the next few lines).,not
CppCoreGuidelines/scripts/python/cpplint.py,5839,Set end_col to check whole lines after we are done with the,not
CppCoreGuidelines/scripts/python/cpplint.py,5840,first line.,not
CppCoreGuidelines/scripts/python/cpplint.py,5855,Look for closing parenthesis nearby.  We need one to confirm where,not
CppCoreGuidelines/scripts/python/cpplint.py,5856,the declarator ends and where the virt-specifier starts to avoid,not
CppCoreGuidelines/scripts/python/cpplint.py,5857,false positives.,not
CppCoreGuidelines/scripts/python/cpplint.py,5868,"Check that at most one of ""override"" or ""final"" is present, not both",not
CppCoreGuidelines/scripts/python/cpplint.py,5877,"Returns true if we are at a new block, and it is directly",not
CppCoreGuidelines/scripts/python/cpplint.py,5878,inside of a namespace.,not
CppCoreGuidelines/scripts/python/cpplint.py,5921,"If we are in a macro, we do not want to check the namespace indentation.",not
CppCoreGuidelines/scripts/python/cpplint.py,5928,Call this method if the line is directly inside of a namespace.,not
CppCoreGuidelines/scripts/python/cpplint.py,5929,If the line above is blank (excluding comments) or the start of,not
CppCoreGuidelines/scripts/python/cpplint.py,5930,"an inner namespace, it cannot be indented.",not
CppCoreGuidelines/scripts/python/cpplint.py,5997,Flag unapproved C++ TR1 headers.,not
CppCoreGuidelines/scripts/python/cpplint.py,6002,Flag unapproved C++11 headers.,not
CppCoreGuidelines/scripts/python/cpplint.py,6017,The only place where we need to worry about C++11 keywords and library,not
CppCoreGuidelines/scripts/python/cpplint.py,6018,features in preprocessor directives is in macro definitions.,not
CppCoreGuidelines/scripts/python/cpplint.py,6021,These are classes and free functions.  The classes are always,not
CppCoreGuidelines/scripts/python/cpplint.py,6022,"mentioned as std::*, but we only catch the free functions if",not
CppCoreGuidelines/scripts/python/cpplint.py,6023,they're not found by ADL.  They're alphabetical by header.,not
CppCoreGuidelines/scripts/python/cpplint.py,6025,type_traits,not
CppCoreGuidelines/scripts/python/cpplint.py,6049,Flag unapproved C++14 headers.,not
CppCoreGuidelines/scripts/python/cpplint.py,6096,Check that the .cc file has included its header if it exists.,not
CppCoreGuidelines/scripts/python/cpplint.py,6100,We check here rather than inside ProcessLine so that we see raw,not
CppCoreGuidelines/scripts/python/cpplint.py,6101,"lines rather than ""cleaned"" lines.",not
CppCoreGuidelines/scripts/python/cpplint.py,6122,Reached the root directory.,not
CppCoreGuidelines/scripts/python/cpplint.py,6132,Remove comments.,not
CppCoreGuidelines/scripts/python/cpplint.py,6144,"When matching exclude_files pattern, use the base_name of",not
CppCoreGuidelines/scripts/python/cpplint.py,6145,the current file name or the directory name we are processing.,not
CppCoreGuidelines/scripts/python/cpplint.py,6146,"For example, if we are checking for lint errors in /foo/bar/baz.cc",not
CppCoreGuidelines/scripts/python/cpplint.py,6147,"and we found the .cfg file at /foo/CPPLINT.cfg, then the config",not
CppCoreGuidelines/scripts/python/cpplint.py,6148,"file's ""exclude_files"" filter is meant to be checked against ""bar""",not
CppCoreGuidelines/scripts/python/cpplint.py,6149,"and not ""baz"" nor ""bar/baz.cc"".",not
CppCoreGuidelines/scripts/python/cpplint.py,6194,Apply all the accumulated filters in reverse order (top-level directory,not
CppCoreGuidelines/scripts/python/cpplint.py,6195,config options having the least priority).,not
CppCoreGuidelines/scripts/python/cpplint.py,6226,"Support the UNIX convention of using ""-"" for stdin.  Note that",not
CppCoreGuidelines/scripts/python/cpplint.py,6227,we are not opening the file with universal newline support,not
CppCoreGuidelines/scripts/python/cpplint.py,6228,"(which codecs doesn't support anyway), so the resulting lines do",not
CppCoreGuidelines/scripts/python/cpplint.py,6229,contain trailing '\r' characters if we are reading a file that,not
CppCoreGuidelines/scripts/python/cpplint.py,6230,has CRLF endings.,not
CppCoreGuidelines/scripts/python/cpplint.py,6231,"If after the split a trailing '\r' is present, it is removed",not
CppCoreGuidelines/scripts/python/cpplint.py,6232,below.,not
CppCoreGuidelines/scripts/python/cpplint.py,6241,Remove trailing '\r'.,not
CppCoreGuidelines/scripts/python/cpplint.py,6242,The -1 accounts for the extra trailing blank line we get from split(),not
CppCoreGuidelines/scripts/python/cpplint.py,6256,"Note, if no dot is found, this will give the entire filename as the ext.",not
CppCoreGuidelines/scripts/python/cpplint.py,6259,"When reading from stdin, the extension is unknown, so no cpplint tests",not
CppCoreGuidelines/scripts/python/cpplint.py,6260,should rely on the extension.,not
CppCoreGuidelines/scripts/python/cpplint.py,6268,"If end-of-line sequences are a mix of LF and CR-LF, issue",not
CppCoreGuidelines/scripts/python/cpplint.py,6269,warnings on the lines with CR.,not
CppCoreGuidelines/scripts/python/cpplint.py,6270,,not
CppCoreGuidelines/scripts/python/cpplint.py,6271,"Don't issue any warnings if all lines are uniformly LF or CR-LF,",not
CppCoreGuidelines/scripts/python/cpplint.py,6272,"since critique can handle these just fine, and the style guide",not
CppCoreGuidelines/scripts/python/cpplint.py,6273,doesn't dictate a particular end of line sequence.,not
CppCoreGuidelines/scripts/python/cpplint.py,6274,,not
CppCoreGuidelines/scripts/python/cpplint.py,6275,We can't depend on os.linesep to determine what the desired,not
CppCoreGuidelines/scripts/python/cpplint.py,6276,"end-of-line sequence should be, since that will return the",not
CppCoreGuidelines/scripts/python/cpplint.py,6277,server-side end-of-line sequence.,not
CppCoreGuidelines/scripts/python/cpplint.py,6279,Warn on every line with CR.  An alternative approach might be to,not
CppCoreGuidelines/scripts/python/cpplint.py,6280,"check whether the file is mostly CRLF or just LF, and warn on the",not
CppCoreGuidelines/scripts/python/cpplint.py,6281,"minority, we bias toward LF here since most tools prefer LF.",not
CppCoreGuidelines/scripts/python/cpplint.py,6457,Change stderr to write with replacement characters so we don't die,not
CppCoreGuidelines/scripts/python/cpplint.py,6458,if we try to print something containing non-ASCII characters.,not
CppCoreGuidelines/scripts/python/md-split.py,1,! /usr/bin/env python,not
CppCoreGuidelines/scripts/python/md-split.py,3,A script that splits a Markdown file into plain text (for spell checking) and c++ files.,not
CppCoreGuidelines/scripts/python/md-split.py,44,ensure folder exists,not
CppCoreGuidelines/scripts/python/md-split.py,68,"reach here either line was not code, or was code",not
CppCoreGuidelines/scripts/python/md-split.py,69,and we dealt with n code lines,not
CppCoreGuidelines/scripts/python/md-split.py,71,store header id for codeblock,not
CppCoreGuidelines/scripts/python/md-split.py,96,copy comments to plain text for spell check,not
CppCoreGuidelines/scripts/python/md-split.py,103,write empty line so line numbers stay stable,not
CppCoreGuidelines/scripts/python/md-split.py,147,"add commonly used headers, so that lines can likely compile.",not
CppCoreGuidelines/scripts/python/md-split.py,148,"This is work in progress, the main issue remains handling class",not
CppCoreGuidelines/scripts/python/md-split.py,149,declarations in in-function code differently,not
CppCoreGuidelines/scripts/python/md-split.py,167,"TODO: if not toplevel code, wrap inside class",SATD
CppCoreGuidelines/scripts/python/md-split.py,182,"Remove well-formed html tags, fixing mistakes by legitimate users",not
CppCoreGuidelines/scripts/python/md-split.py,199,group 0 is full match,not
CppCoreGuidelines/scripts/python/cpplint_wrap.py,1,wraps local cpplint to produce verbose output without code harness,not
