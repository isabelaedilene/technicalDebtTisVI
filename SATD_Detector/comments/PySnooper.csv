file path,line #,comment,satd
PySnooper/setup.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/setup.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/test_pysnooper.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_pysnooper.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/test_pysnooper.py,65,"There should be line entries for these three lines,",not
PySnooper/tests/test_pysnooper.py,66,"no line entries for anything else in this function,",not
PySnooper/tests/test_pysnooper.py,67,but calls to all bar functions should be traced,not
PySnooper/tests/test_pysnooper.py,89,"not traced, mustn't show up",not
PySnooper/tests/test_pysnooper.py,99,In first with,not
PySnooper/tests/test_pysnooper.py,110,In with in recursive call,not
PySnooper/tests/test_pysnooper.py,120,Call to bar1 from if block outside with,not
PySnooper/tests/test_pysnooper.py,129,In with in recursive call,not
PySnooper/tests/test_pysnooper.py,132,Call to bar2 from within with,not
PySnooper/tests/test_pysnooper.py,141,In with in recursive call,not
PySnooper/tests/test_pysnooper.py,145,Call to bar3 from after with,not
PySnooper/tests/test_pysnooper.py,154,"-- Similar to previous few sections,",not
PySnooper/tests/test_pysnooper.py,155,-- but from first call to foo,not
PySnooper/tests/test_pysnooper.py,157,In with in first call,not
PySnooper/tests/test_pysnooper.py,160,Call to bar2 from within with,not
PySnooper/tests/test_pysnooper.py,169,In with in first call,not
PySnooper/tests/test_pysnooper.py,173,Call to bar3 from after with,not
PySnooper/tests/test_pysnooper.py,452,doesn't have attributes,not
PySnooper/tests/test_pysnooper.py,801,Multi-line decorator for extra confusion!,not
PySnooper/tests/test_pysnooper.py,823,inside lambda,not
PySnooper/tests/test_pysnooper.py,829,back in my_function,not
PySnooper/tests/test_pysnooper.py,1002,Testing that a single Tracer can handle many mixed uses,not
PySnooper/tests/test_pysnooper.py,1012,"There should be line entries for these three lines,",not
PySnooper/tests/test_pysnooper.py,1013,"no line entries for anything else in this function,",not
PySnooper/tests/test_pysnooper.py,1014,but calls to all bar functions should be traced,not
PySnooper/tests/test_pysnooper.py,1035,"not traced, mustn't show up",not
PySnooper/tests/test_pysnooper.py,1045,In first with,not
PySnooper/tests/test_pysnooper.py,1056,In with in recursive call,not
PySnooper/tests/test_pysnooper.py,1066,Call to bar1 from if block outside with,not
PySnooper/tests/test_pysnooper.py,1075,In with in recursive call,not
PySnooper/tests/test_pysnooper.py,1078,Call to bar2 from within with,not
PySnooper/tests/test_pysnooper.py,1087,In with in recursive call,not
PySnooper/tests/test_pysnooper.py,1091,Call to bar3 from after with,not
PySnooper/tests/test_pysnooper.py,1100,"-- Similar to previous few sections,",not
PySnooper/tests/test_pysnooper.py,1101,-- but from first call to foo,not
PySnooper/tests/test_pysnooper.py,1103,In with in first call,not
PySnooper/tests/test_pysnooper.py,1106,Call to bar2 from within with,not
PySnooper/tests/test_pysnooper.py,1115,In with in first call,not
PySnooper/tests/test_pysnooper.py,1119,Call to bar3 from after with,not
PySnooper/tests/test_pysnooper.py,1378,Pause and resume:,not
PySnooper/tests/test_pysnooper.py,1395,Pause and resume:,not
PySnooper/tests/test_pysnooper.py,1689,"Do simple property operations, make sure we didn't mess up the normal behavior",not
PySnooper/tests/test_pysnooper.py,1700,"The property methods will not be traced, but their calls to plain_method will be.",not
PySnooper/tests/test_pysnooper.py,1713,Called from getter,not
PySnooper/tests/test_pysnooper.py,1721,Called from setter,not
PySnooper/tests/test_pysnooper.py,1729,Called from deleter,not
PySnooper/tests/test_mini_toolbox.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_mini_toolbox.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/test_not_implemented.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_not_implemented.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/utils.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/utils.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/utils.py,105,"Todo: Looking at this class, we could rework the hierarchy.",SATD
PySnooper/tests/utils.py,392,to copy paste into expected_output,not
PySnooper/tests/utils.py,393,show pytest diff (may need -vv flag to see in full),not
PySnooper/tests/test_chinese.py,1,-*- coding: utf-8 -*-,not
PySnooper/tests/test_chinese.py,2,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_chinese.py,3,This program is distributed under the MIT license.,not
PySnooper/tests/test_multiple_files/test_multiple_files.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_multiple_files/test_multiple_files.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/test_multiple_files/multiple_files/bar.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_multiple_files/multiple_files/bar.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/test_multiple_files/multiple_files/foo.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_multiple_files/multiple_files/foo.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/mini_toolbox/contextlib.py,11,Backwards compatibility,not
PySnooper/tests/mini_toolbox/contextlib.py,60,Issue 19330: ensure context manager instances have good docstrings,not
PySnooper/tests/mini_toolbox/contextlib.py,65,"Unfortunately, this still doesn't provide good help output when",not
PySnooper/tests/mini_toolbox/contextlib.py,66,"inspecting the created context manager instances, since pydoc",not
PySnooper/tests/mini_toolbox/contextlib.py,67,currently bypasses the instance docstring and shows the docstring,not
PySnooper/tests/mini_toolbox/contextlib.py,68,for the class instead.,not
PySnooper/tests/mini_toolbox/contextlib.py,69,See http://bugs.python.org/issue19404 for more details.,not
PySnooper/tests/mini_toolbox/contextlib.py,72,"_GCM instances are one-shot context managers, so the",not
PySnooper/tests/mini_toolbox/contextlib.py,73,CM must be recreated each time a decorated function is,not
PySnooper/tests/mini_toolbox/contextlib.py,74,called,not
PySnooper/tests/mini_toolbox/contextlib.py,93,Need to force instantiation so we can reliably,not
PySnooper/tests/mini_toolbox/contextlib.py,94,tell if we get the same exception back,not
PySnooper/tests/mini_toolbox/contextlib.py,100,Suppress StopIteration *unless* it's the same exception that,not
PySnooper/tests/mini_toolbox/contextlib.py,101,was passed to throw().  This prevents a StopIteration,not
PySnooper/tests/mini_toolbox/contextlib.py,102,"raised inside the ""with"" statement from being suppressed.",not
PySnooper/tests/mini_toolbox/contextlib.py,105,Don't re-raise the passed in exception,not
PySnooper/tests/mini_toolbox/contextlib.py,108,"Likewise, avoid suppressing if a StopIteration exception",not
PySnooper/tests/mini_toolbox/contextlib.py,109,was passed to throw() and later wrapped into a RuntimeError,not
PySnooper/tests/mini_toolbox/contextlib.py,110,(see PEP 479).,not
PySnooper/tests/mini_toolbox/contextlib.py,115,only re-raise if it's *not* the exception that was,not
PySnooper/tests/mini_toolbox/contextlib.py,116,"passed to throw(), because __exit__() must not raise",not
PySnooper/tests/mini_toolbox/contextlib.py,117,an exception unless __exit__() itself failed.  But throw(),not
PySnooper/tests/mini_toolbox/contextlib.py,118,"has to raise the exception to signal propagation, so this",not
PySnooper/tests/mini_toolbox/contextlib.py,119,fixes the impedance mismatch between the throw() protocol,not
PySnooper/tests/mini_toolbox/contextlib.py,120,and the __exit__() protocol.,not
PySnooper/tests/mini_toolbox/contextlib.py,121,,not
PySnooper/tests/mini_toolbox/contextlib.py,191,We use a list of old targets to make this CM re-entrant,not
PySnooper/tests/mini_toolbox/contextlib.py,243,"Unlike isinstance and issubclass, CPython exception handling",not
PySnooper/tests/mini_toolbox/contextlib.py,244,currently only looks at the concrete type hierarchy (ignoring,not
PySnooper/tests/mini_toolbox/contextlib.py,245,the instance and subclass checking hooks). While Guido considers,not
PySnooper/tests/mini_toolbox/contextlib.py,246,"that a bug rather than a feature, it's a fairly hard one to fix",SATD
PySnooper/tests/mini_toolbox/contextlib.py,247,due to various internal implementation details. suppress provides,not
PySnooper/tests/mini_toolbox/contextlib.py,248,"the simpler issubclass based semantics, rather than trying to",not
PySnooper/tests/mini_toolbox/contextlib.py,249,exactly reproduce the limitations of the CPython interpreter.,not
PySnooper/tests/mini_toolbox/contextlib.py,250,,not
PySnooper/tests/mini_toolbox/contextlib.py,251,See http://bugs.python.org/issue12029 for more details,not
PySnooper/tests/mini_toolbox/contextlib.py,255,Context manipulation is Python 3 only,not
PySnooper/tests/mini_toolbox/contextlib.py,260,"Context may not be correct, so find the end of the chain",not
PySnooper/tests/mini_toolbox/contextlib.py,264,Context is already set correctly (see issue 20317),not
PySnooper/tests/mini_toolbox/contextlib.py,269,Change the end of the chain to point to the exception,not
PySnooper/tests/mini_toolbox/contextlib.py,270,we expect it to reference,not
PySnooper/tests/mini_toolbox/contextlib.py,276,"bare ""raise exc_details[1]"" replaces our carefully",not
PySnooper/tests/mini_toolbox/contextlib.py,277,set-up context,not
PySnooper/tests/mini_toolbox/contextlib.py,284,No exception context in Python 2,not
PySnooper/tests/mini_toolbox/contextlib.py,288,"Use 3 argument raise in Python 2,",not
PySnooper/tests/mini_toolbox/contextlib.py,289,but use exec to avoid SyntaxError in Python 3,not
PySnooper/tests/mini_toolbox/contextlib.py,294,Handle old-style classes if they exist,not
PySnooper/tests/mini_toolbox/contextlib.py,298,Python 3 doesn't have old-style classes,not
PySnooper/tests/mini_toolbox/contextlib.py,301,Need to handle old-style context managers on Python 2,not
PySnooper/tests/mini_toolbox/contextlib.py,305,Old-style class,not
PySnooper/tests/mini_toolbox/contextlib.py,306,New-style class,not
PySnooper/tests/mini_toolbox/contextlib.py,308,Inspired by discussions on http://bugs.python.org/issue13585,not
PySnooper/tests/mini_toolbox/contextlib.py,346,We use an unbound method rather than a bound method to follow,not
PySnooper/tests/mini_toolbox/contextlib.py,347,the standard lookup behaviour for special methods,not
PySnooper/tests/mini_toolbox/contextlib.py,352,"Not a context manager, so assume its a callable",not
PySnooper/tests/mini_toolbox/contextlib.py,356,Allow use as a decorator,not
PySnooper/tests/mini_toolbox/contextlib.py,365,"We changed the signature, so using @wraps is not appropriate, but",not
PySnooper/tests/mini_toolbox/contextlib.py,366,setting __wrapped__ may still help with introspection,not
PySnooper/tests/mini_toolbox/contextlib.py,369,Allow use as a decorator,not
PySnooper/tests/mini_toolbox/contextlib.py,377,We look up the special methods on the type to match the with statement,not
PySnooper/tests/mini_toolbox/contextlib.py,394,We manipulate the exception state so it behaves as though,not
PySnooper/tests/mini_toolbox/contextlib.py,395,we were actually nesting multiple with statements,not
PySnooper/tests/mini_toolbox/contextlib.py,399,Callbacks are invoked in LIFO order to match the behaviour of,not
PySnooper/tests/mini_toolbox/contextlib.py,400,nested context managers,not
PySnooper/tests/mini_toolbox/contextlib.py,412,simulate the stack of exceptions by setting the context,not
PySnooper/tests/mini_toolbox/contextlib.py,420,Preserve backwards compatibility,not
PySnooper/tests/mini_toolbox/__init__.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/mini_toolbox/__init__.py,2,This program is distributed under the MIT license.,not
PySnooper/tests/mini_toolbox/__init__.py,83,,not
PySnooper/tests/mini_toolbox/__init__.py,84,"We let the user input either an `(object, attribute_string)`, a",not
PySnooper/tests/mini_toolbox/__init__.py,85,"`(dict, key)` pair, or a `(getter, setter)` pair. So now it's our job",not
PySnooper/tests/mini_toolbox/__init__.py,86,to inspect `variable` and figure out which one of these options the,not
PySnooper/tests/mini_toolbox/__init__.py,87,"user chose, and then obtain from that a `(getter, setter)` pair that",not
PySnooper/tests/mini_toolbox/__init__.py,88,we could use.,not
PySnooper/tests/mini_toolbox/__init__.py,101,"`first` is a dictoid; so we were probably handed a `(dict, key)`",not
PySnooper/tests/mini_toolbox/__init__.py,102,pair.,not
PySnooper/tests/mini_toolbox/__init__.py,107,"Finished handling the `(dict, key)` case.",not
PySnooper/tests/mini_toolbox/__init__.py,110,"`second` is a callable; so we were probably handed a `(getter,",not
PySnooper/tests/mini_toolbox/__init__.py,111,setter)` pair.,not
PySnooper/tests/mini_toolbox/__init__.py,115,"Finished handling the `(getter, setter)` case.",not
PySnooper/tests/mini_toolbox/__init__.py,117,"All that's left is the `(object, attribute_string)` case.",not
PySnooper/tests/mini_toolbox/__init__.py,124,"Finished handling the `(object, attribute_string)` case.",not
PySnooper/tests/mini_toolbox/__init__.py,126,,not
PySnooper/tests/mini_toolbox/__init__.py,127,,not
PySnooper/tests/mini_toolbox/__init__.py,128,"Finished obtaining a `(getter, setter)` pair from `variable`.",not
PySnooper/tests/mini_toolbox/__init__.py,152,In `__exit__` we'll want to check if anyone changed the value of the,not
PySnooper/tests/mini_toolbox/__init__.py,153,"variable in the suite, which is unallowed. But we can't compare to",not
PySnooper/tests/mini_toolbox/__init__.py,154,"`.value`, because sometimes when you set a value to a variable, some",not
PySnooper/tests/mini_toolbox/__init__.py,155,"mechanism modifies that value for various reasons, resulting in a",not
PySnooper/tests/mini_toolbox/__init__.py,156,"supposedly equivalent, but not identical, value. For example this",not
PySnooper/tests/mini_toolbox/__init__.py,157,happens when you set the current working directory on Mac OS.,not
PySnooper/tests/mini_toolbox/__init__.py,158,,not
PySnooper/tests/mini_toolbox/__init__.py,159,"So here we record the value right after setting, and after any",not
PySnooper/tests/mini_toolbox/__init__.py,160,possible processing the system did to it:,not
PySnooper/tests/mini_toolbox/__init__.py,169,Asserting no-one inside the suite changed our variable:,not
PySnooper/tests/mini_toolbox/__init__.py,197,not stdout,not
PySnooper/tests/mini_toolbox/__init__.py,203,not stderr,not
PySnooper/tests/mini_toolbox/__init__.py,213,Not doing exception swallowing anywhere here.,not
PySnooper/tests/mini_toolbox/__init__.py,249,We don't allow anyone to remove it except for us:,not
PySnooper/tests/mini_toolbox/pathlib.py,1,Copyright (c) 2014-2017 Matthias C. M. Troffaes,not
PySnooper/tests/mini_toolbox/pathlib.py,2,Copyright (c) 2012-2014 Antoine Pitrou and contributors,not
PySnooper/tests/mini_toolbox/pathlib.py,3,Distributed under the terms of the MIT License.,not
PySnooper/tests/mini_toolbox/pathlib.py,56,,not
PySnooper/tests/mini_toolbox/pathlib.py,57,Internals,not
PySnooper/tests/mini_toolbox/pathlib.py,58,,not
PySnooper/tests/mini_toolbox/pathlib.py,62,py2 => minimal unicode support,not
PySnooper/tests/mini_toolbox/pathlib.py,127,"get file information, needed for samefile on older Python versions",not
PySnooper/tests/mini_toolbox/pathlib.py,128,see http://timgolden.me.uk/python/win32_how_do_i/,not
PySnooper/tests/mini_toolbox/pathlib.py,129,see_if_two_files_are_the_same_file.html,not
PySnooper/tests/mini_toolbox/pathlib.py,189,"Whether this pattern needs actual matching using fnmatch, or can",not
PySnooper/tests/mini_toolbox/pathlib.py,190,be looked up directly as a file.,not
PySnooper/tests/mini_toolbox/pathlib.py,225,"If no drive is present, try to find one in the previous",not
PySnooper/tests/mini_toolbox/pathlib.py,226,parts. This makes the result of parsing e.g.,not
PySnooper/tests/mini_toolbox/pathlib.py,227,"(""C:"", ""/"", ""a"") reasonably intuitive.",not
PySnooper/tests/mini_toolbox/pathlib.py,252,Same drive => second path is relative to the first,not
PySnooper/tests/mini_toolbox/pathlib.py,255,Second path is non-anchored (common case),not
PySnooper/tests/mini_toolbox/pathlib.py,261,Reference for Windows paths can be found at,not
PySnooper/tests/mini_toolbox/pathlib.py,262,http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx,not
PySnooper/tests/mini_toolbox/pathlib.py,280,Interesting findings about extended paths:,not
PySnooper/tests/mini_toolbox/pathlib.py,281,"- '\\?\c:\a', '//?/c:\a' and '//?/c:/a' are all supported",not
PySnooper/tests/mini_toolbox/pathlib.py,282,but '\\?\c:/a' is not,not
PySnooper/tests/mini_toolbox/pathlib.py,283,"- extended paths are always absolute; ""relative"" extended paths will",not
PySnooper/tests/mini_toolbox/pathlib.py,284,fail.,not
PySnooper/tests/mini_toolbox/pathlib.py,290,"XXX extended paths should also disable the collapsing of "".""",SATD
PySnooper/tests/mini_toolbox/pathlib.py,291,components (according to MSDN docs).,not
PySnooper/tests/mini_toolbox/pathlib.py,299,is a UNC path:,not
PySnooper/tests/mini_toolbox/pathlib.py,300,vvvvvvvvvvvvvvvvvvvvv root,not
PySnooper/tests/mini_toolbox/pathlib.py,301,\\machine\mountpoint\directory\etc\...,not
PySnooper/tests/mini_toolbox/pathlib.py,302,directory ^^^^^^^^^^^^^^,not
PySnooper/tests/mini_toolbox/pathlib.py,306,a UNC path can't have two slashes in a row,not
PySnooper/tests/mini_toolbox/pathlib.py,307,(after the initial two),not
PySnooper/tests/mini_toolbox/pathlib.py,340,End of the path after the first one not found,not
PySnooper/tests/mini_toolbox/pathlib.py,353,Means fallback on absolute,not
PySnooper/tests/mini_toolbox/pathlib.py,367,Turn back an extended path into a normal DOS-like path,not
PySnooper/tests/mini_toolbox/pathlib.py,371,NOTE: the rules for reserved names seem somewhat complicated,not
PySnooper/tests/mini_toolbox/pathlib.py,372,"(e.g. r""..\NUL"" is reserved but not r""foo\NUL"").",not
PySnooper/tests/mini_toolbox/pathlib.py,373,We err on the side of caution and return True for paths which are,not
PySnooper/tests/mini_toolbox/pathlib.py,374,not considered reserved by Windows.,not
PySnooper/tests/mini_toolbox/pathlib.py,378,UNC paths are never reserved,not
PySnooper/tests/mini_toolbox/pathlib.py,383,"Under Windows, file URIs use the UTF-8 encoding.",not
PySnooper/tests/mini_toolbox/pathlib.py,386,It's a path on a local drive => 'file:///c:/a/b',not
PySnooper/tests/mini_toolbox/pathlib.py,391,It's a path on a network drive => 'file://host/share/a/b',not
PySnooper/tests/mini_toolbox/pathlib.py,410,Try to guess user home directory.  By default all users,not
PySnooper/tests/mini_toolbox/pathlib.py,411,directories are located in the same place and are named by,not
PySnooper/tests/mini_toolbox/pathlib.py,412,corresponding usernames.  If current user home directory points,not
PySnooper/tests/mini_toolbox/pathlib.py,413,"to nonstandard place, this guess is likely wrong.",not
PySnooper/tests/mini_toolbox/pathlib.py,438,According to POSIX path resolution:,not
PySnooper/tests/mini_toolbox/pathlib.py,439,http://pubs.opengroup.org/onlinepubs/009695399/basedefs/,not
PySnooper/tests/mini_toolbox/pathlib.py,440,xbd_chap04.html#tag_04_11,not
PySnooper/tests/mini_toolbox/pathlib.py,441,"""A pathname that begins with two successive slashes may be",not
PySnooper/tests/mini_toolbox/pathlib.py,442,"interpreted in an implementation-defined manner, although more",not
PySnooper/tests/mini_toolbox/pathlib.py,443,"than two leading slashes shall be treated as a single slash"".",not
PySnooper/tests/mini_toolbox/pathlib.py,468,current dir,not
PySnooper/tests/mini_toolbox/pathlib.py,471,parent dir,not
PySnooper/tests/mini_toolbox/pathlib.py,476,Already seen this path,not
PySnooper/tests/mini_toolbox/pathlib.py,479,use cached value,not
PySnooper/tests/mini_toolbox/pathlib.py,481,"The symlink is not resolved, so we must have a symlink",not
PySnooper/tests/mini_toolbox/pathlib.py,482,loop.,not
PySnooper/tests/mini_toolbox/pathlib.py,484,Resolve the symbolic link,not
PySnooper/tests/mini_toolbox/pathlib.py,490,"Not a symlink, or non-strict mode. We just leave the path",not
PySnooper/tests/mini_toolbox/pathlib.py,491,untouched.,not
PySnooper/tests/mini_toolbox/pathlib.py,494,not resolved symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,496,resolved symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,499,"NOTE: according to POSIX, getcwd() cannot contain path components",not
PySnooper/tests/mini_toolbox/pathlib.py,500,which are symlinks.,not
PySnooper/tests/mini_toolbox/pathlib.py,508,"We represent the path using the local filesystem encoding,",not
PySnooper/tests/mini_toolbox/pathlib.py,509,for portability to other applications.,not
PySnooper/tests/mini_toolbox/pathlib.py,590,"Under POSIX, os.symlink() takes two args",not
PySnooper/tests/mini_toolbox/pathlib.py,597,Helper for resolve(),not
PySnooper/tests/mini_toolbox/pathlib.py,605,,not
PySnooper/tests/mini_toolbox/pathlib.py,606,Globbing helpers,not
PySnooper/tests/mini_toolbox/pathlib.py,607,,not
PySnooper/tests/mini_toolbox/pathlib.py,756,,not
PySnooper/tests/mini_toolbox/pathlib.py,757,Public API,not
PySnooper/tests/mini_toolbox/pathlib.py,758,,not
PySnooper/tests/mini_toolbox/pathlib.py,767,We don't store the instance to avoid reference cycles,not
PySnooper/tests/mini_toolbox/pathlib.py,813,Using the parts tuple helps share interned path parts,not
PySnooper/tests/mini_toolbox/pathlib.py,814,when pickling related paths.,not
PySnooper/tests/mini_toolbox/pathlib.py,819,"This is useful when you don't want to create an instance, just",not
PySnooper/tests/mini_toolbox/pathlib.py,820,canonicalize some constructor arguments.,not
PySnooper/tests/mini_toolbox/pathlib.py,829,duck typing for older Python versions,not
PySnooper/tests/mini_toolbox/pathlib.py,833,Force-cast str subclasses to str (issue #21127),not
PySnooper/tests/mini_toolbox/pathlib.py,835,also handle unicode for PY2 (six.text_type = unicode),not
PySnooper/tests/mini_toolbox/pathlib.py,837,cast to str using filesystem encoding,not
PySnooper/tests/mini_toolbox/pathlib.py,848,"We need to call _parse_args on the instance, so as to get the",not
PySnooper/tests/mini_toolbox/pathlib.py,849,right flavour.,not
PySnooper/tests/mini_toolbox/pathlib.py,877,Overridden in concrete Path,not
PySnooper/tests/mini_toolbox/pathlib.py,923,"Cached casefolded parts, for hashing and comparison",not
PySnooper/tests/mini_toolbox/pathlib.py,1035,"XXX if suffix is None, should the current suffix be removed?",SATD
PySnooper/tests/mini_toolbox/pathlib.py,1057,"For the purpose of this method, drive and root are considered",not
PySnooper/tests/mini_toolbox/pathlib.py,1058,"separate parts, i.e.:",not
PySnooper/tests/mini_toolbox/pathlib.py,1059,Path('c:/').relative_to('c:')  gives Path('/'),not
PySnooper/tests/mini_toolbox/pathlib.py,1060,Path('c:/').relative_to('/')   raise ValueError,not
PySnooper/tests/mini_toolbox/pathlib.py,1088,We cache the tuple to avoid building a new one each time .parts,not
PySnooper/tests/mini_toolbox/pathlib.py,1089,is accessed.  XXX is this necessary?,SATD
PySnooper/tests/mini_toolbox/pathlib.py,1167,Can't subclass os.PathLike from PurePath and keep the constructor,not
PySnooper/tests/mini_toolbox/pathlib.py,1168,optimizations in PurePath._parse_args().,not
PySnooper/tests/mini_toolbox/pathlib.py,1183,Filesystem-accessing classes,not
PySnooper/tests/mini_toolbox/pathlib.py,1203,Private non-constructor arguments,not
PySnooper/tests/mini_toolbox/pathlib.py,1213,This is an optimization used for dir walking.  `part` must be,not
PySnooper/tests/mini_toolbox/pathlib.py,1214,a single part relative to this path.,not
PySnooper/tests/mini_toolbox/pathlib.py,1230,A stub for the opener argument to built-in open(),not
PySnooper/tests/mini_toolbox/pathlib.py,1242,Public API,not
PySnooper/tests/mini_toolbox/pathlib.py,1284,Yielding a path object for these makes little sense,not
PySnooper/tests/mini_toolbox/pathlib.py,1323,XXX untested yet!,SATD
PySnooper/tests/mini_toolbox/pathlib.py,1328,"FIXME this must defer to the specific flavour (and, under Windows,",SATD
PySnooper/tests/mini_toolbox/pathlib.py,1329,use nt._getfullpathname()),not
PySnooper/tests/mini_toolbox/pathlib.py,1344,"No symlink resolution => for consistency, raise an error if",not
PySnooper/tests/mini_toolbox/pathlib.py,1345,the path doesn't exist or is forbidden,not
PySnooper/tests/mini_toolbox/pathlib.py,1348,"Now we have no symlinks in the path, it's safe to normalize it.",not
PySnooper/tests/mini_toolbox/pathlib.py,1434,First try to bump modification time,not
PySnooper/tests/mini_toolbox/pathlib.py,1435,Implementation note: GNU touch uses the UTIME_NOW option of,not
PySnooper/tests/mini_toolbox/pathlib.py,1436,the utimensat() / futimens() functions.,not
PySnooper/tests/mini_toolbox/pathlib.py,1440,Avoid exception chaining,not
PySnooper/tests/mini_toolbox/pathlib.py,1545,Convenience functions for querying the stat results,not
PySnooper/tests/mini_toolbox/pathlib.py,1568,Path doesn't exist or is a broken symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,1569,(see https://bitbucket.org/pitrou/pathlib/issue/12/),not
PySnooper/tests/mini_toolbox/pathlib.py,1582,Path doesn't exist or is a broken symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,1583,(see https://bitbucket.org/pitrou/pathlib/issue/12/),not
PySnooper/tests/mini_toolbox/pathlib.py,1595,Path doesn't exist,not
PySnooper/tests/mini_toolbox/pathlib.py,1607,Path doesn't exist or is a broken symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,1608,(see https://bitbucket.org/pitrou/pathlib/issue/12/),not
PySnooper/tests/mini_toolbox/pathlib.py,1620,Path doesn't exist or is a broken symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,1621,(see https://bitbucket.org/pitrou/pathlib/issue/12/),not
PySnooper/tests/mini_toolbox/pathlib.py,1633,Path doesn't exist or is a broken symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,1634,(see https://bitbucket.org/pitrou/pathlib/issue/12/),not
PySnooper/tests/mini_toolbox/pathlib.py,1646,Path doesn't exist or is a broken symlink,not
PySnooper/tests/mini_toolbox/pathlib.py,1647,(see https://bitbucket.org/pitrou/pathlib/issue/12/),not
PySnooper/tests/test_utils/test_ensure_tuple.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/tests/test_utils/test_ensure_tuple.py,2,This program is distributed under the MIT license.,not
PySnooper/misc/generate_authors.py,1,!/usr/bin/env python,not
PySnooper/misc/generate_authors.py,2,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/misc/generate_authors.py,3,This program is distributed under the MIT license.,not
PySnooper/pysnooper/utils.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/pysnooper/utils.py,2,This program is distributed under the MIT license.,not
PySnooper/pysnooper/utils.py,39,IronPython weirdness.,not
PySnooper/pysnooper/tracer.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/pysnooper/tracer.py,2,This program is distributed under the MIT license.,not
PySnooper/pysnooper/tracer.py,87,We used to check `if source is None` but I found a rare bug where it,not
PySnooper/pysnooper/tracer.py,88,"was empty, but not `None`, so now we check `if not source`.",not
PySnooper/pysnooper/tracer.py,91,"If we just read the source from a file, or if the loader did not",not
PySnooper/pysnooper/tracer.py,92,apply tokenize.detect_encoding to decode the source into a,not
PySnooper/pysnooper/tracer.py,93,"string, then we should do that ourselves.",not
PySnooper/pysnooper/tracer.py,97,File coding may be specified. Match pattern from PEP-263,not
PySnooper/pysnooper/tracer.py,98,(https://www.python.org/dev/peps/pep-0263/),not
PySnooper/pysnooper/tracer.py,122,God damn Python 2,not
PySnooper/pysnooper/tracer.py,248,"Coroutines are functions, but snooping them is not supported",not
PySnooper/pysnooper/tracer.py,249,at the moment,not
PySnooper/pysnooper/tracer.py,317,Writing elapsed time:,not
PySnooper/pysnooper/tracer.py,318,,not
PySnooper/pysnooper/tracer.py,326,,not
PySnooper/pysnooper/tracer.py,327,Finished writing elapsed time.,not
PySnooper/pysnooper/tracer.py,340,Checking whether we should trace this line:,not
PySnooper/pysnooper/tracer.py,341,,not
PySnooper/pysnooper/tracer.py,342,"We should trace this line either if it's in the decorated function,",not
PySnooper/pysnooper/tracer.py,343,or the user asked to go a few levels deeper and we're within that,not
PySnooper/pysnooper/tracer.py,344,number of levels deeper.,not
PySnooper/pysnooper/tracer.py,348,"We did the most common and quickest check above, because the",not
PySnooper/pysnooper/tracer.py,349,"trace function runs so incredibly often, therefore it's",not
PySnooper/pysnooper/tracer.py,350,crucial to hyper-optimize it for the common case.,not
PySnooper/pysnooper/tracer.py,370,,not
PySnooper/pysnooper/tracer.py,371,Finished checking whether we should trace this line.,not
PySnooper/pysnooper/tracer.py,373,Making timestamp:,not
PySnooper/pysnooper/tracer.py,374,,not
PySnooper/pysnooper/tracer.py,390,,not
PySnooper/pysnooper/tracer.py,391,Finished making timestamp.,not
PySnooper/pysnooper/tracer.py,411,Reporting newish and modified variables:,not
PySnooper/pysnooper/tracer.py,412,,not
PySnooper/pysnooper/tracer.py,432,,not
PySnooper/pysnooper/tracer.py,433,Finished newish and modified variables.,not
PySnooper/pysnooper/tracer.py,436,Dealing with misplaced function definition:,not
PySnooper/pysnooper/tracer.py,437,,not
PySnooper/pysnooper/tracer.py,439,"If a function decorator is found, skip lines until an actual",not
PySnooper/pysnooper/tracer.py,440,function definition is found.,not
PySnooper/pysnooper/tracer.py,445,End of source file reached without finding a function,not
PySnooper/pysnooper/tracer.py,446,definition. Fall back to original source line.,not
PySnooper/pysnooper/tracer.py,450,Found the def line!,not
PySnooper/pysnooper/tracer.py,454,,not
PySnooper/pysnooper/tracer.py,455,Finished dealing with misplaced function definition.,not
PySnooper/pysnooper/tracer.py,457,"If a call ends due to an exception, we still get a 'return' event",not
PySnooper/pysnooper/tracer.py,458,with arg = None. This seems to be the only way to tell the difference,not
PySnooper/pysnooper/tracer.py,459,https://stackoverflow.com/a/12800909/2482744,not
PySnooper/pysnooper/__init__.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/pysnooper/__init__.py,2,This program is distributed under the MIT license.,not
PySnooper/pysnooper/__init__.py,30,Avoid polluting the namespace,not
PySnooper/pysnooper/pycompat.py,1,Copyright 2019 Ram Rachum and collaborators.,not
PySnooper/pysnooper/pycompat.py,2,This program is distributed under the MIT license.,not
PySnooper/pysnooper/pycompat.py,40,Make a concession for older `pathlib` versions:g,not
PySnooper/pysnooper/pycompat.py,49,Lolz,not
PySnooper/pysnooper/pycompat.py,54,Lolz,not
PySnooper/pysnooper/pycompat.py,66,Python 2.7,not
